{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "actions",
  "type": "registry:lib",
  "title": "Resource Actions",
  "description": "Server actions for resource operations.",
  "dependencies": [
    "next"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/actions/resource-actions.ts",
      "content": "'use server';\n\nimport { revalidatePath } from 'next/cache';\n\n/**\n * リソースを取得するサーバーアクション\n */\nexport async function fetchResource(endpoint: string, resourceId: string) {\n  try {\n    const url = `${endpoint}/${resourceId}`;\n    const response = await fetch(url, { \n      next: { revalidate: 60 } // 60秒間キャッシュする\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch resource: ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching resource:', error);\n    throw error;\n  }\n}\n\n/**\n * リソース一覧を取得するサーバーアクション\n */\nexport async function fetchResources(url: string) {\n  try {\n    const response = await fetch(url, { \n      next: { revalidate: 60 } // 60秒間キャッシュする\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch resources: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('API response is not an array');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Error fetching resources:', error);\n    throw error;\n  }\n}\n\n/**\n * リソースを作成するサーバーアクション\n */\nexport async function createResource(\n  endpoint: string, \n  data: { type: string; data: any }, \n  redirectPath?: string\n) {\n  try {\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to create resource: ${response.status}`);\n    }\n\n    if (redirectPath) {\n      revalidatePath(redirectPath);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating resource:', error);\n    throw error;\n  }\n}\n\n/**\n * リソースを更新するサーバーアクション\n */\nexport async function updateResource(\n  endpoint: string, \n  resourceId: string, \n  data: { type: string; data: any }, \n  redirectPath?: string\n) {\n  try {\n    const url = `${endpoint}/${resourceId}`;\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to update resource: ${response.status}`);\n    }\n\n    if (redirectPath) {\n      revalidatePath(redirectPath);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating resource:', error);\n    throw error;\n  }\n}\n\n/**\n * リソースを削除するサーバーアクション\n */\nexport async function deleteResource(url: string, redirectPath?: string) {\n  try {\n    const response = await fetch(url, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to delete resource: ${response.status}`);\n    }\n\n    if (redirectPath) {\n      revalidatePath(redirectPath);\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Error deleting resource:', error);\n    throw error;\n  }\n}\n\n/**\n * 複数のリソースを削除するサーバーアクション\n */\nexport async function deleteResources(urls: string[]) {\n  try {\n    await Promise.all(\n      urls.map(url => \n        fetch(url, { method: 'DELETE' })\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(`Failed to delete resource at ${url}: ${response.status}`);\n            }\n            return true;\n          })\n      )\n    );\n    return true;\n  } catch (error) {\n    console.error('Error deleting resources:', error);\n    throw error;\n  }\n} ",
      "type": "registry:lib"
    }
  ]
}