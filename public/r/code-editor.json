{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-editor",
  "type": "registry:block",
  "title": "Code Editor",
  "description": "A code editor component with language support and validation based on Monaco Editor.",
  "dependencies": [
    "@monaco-editor/react",
    "next-themes",
    "monaco-editor"
  ],
  "registryDependencies": [
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/code-editor-language-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/code-editor/code-editor.tsx",
      "content": "'use client';\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { Loader2 } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport { importLanguagePlugin } from '@/registry/new-york/blocks/language-plugin/index';\n\n// サポートされる言語タイプの定義\nexport type SupportedLanguage = 'yaml' | 'json' | 'javascript' | 'typescript' | 'html' | 'css' | 'markdown' | 'plaintext';\n\n// 構文エラーの型定義\nexport interface SyntaxError {\n  message: string;\n  line: number;\n  column: number;\n}\n\n// 言語名の取得\nexport const getLanguageLabel = (language: SupportedLanguage): string => {\n  const labels: Record<SupportedLanguage, string> = {\n    yaml: 'YAML',\n    json: 'JSON',\n    javascript: 'JavaScript',\n    typescript: 'TypeScript',\n    html: 'HTML',\n    css: 'CSS',\n    markdown: 'Markdown',\n    plaintext: 'プレーンテキスト'\n  };\n  \n  return labels[language] || language;\n};\n\n// Monaco EditorのWindow拡張用型定義\ndeclare global {\n  interface Window {\n    monaco?: any;\n  }\n}\n\n// Monaco Editorのワーカー設定を初期化\nif (typeof window !== 'undefined') {\n  // 型アサーションを使用して型エラーを回避\n  const env = window.MonacoEnvironment || {};\n  window.MonacoEnvironment = env;\n  \n  // 既存のワーカーゲッター関数の保存\n  const originalGetWorkerUrl = env.getWorkerUrl;\n  \n  env.getWorkerUrl = (moduleId: string, label: string): string => {\n    // 既存の設定関数があれば呼び出す\n    if (originalGetWorkerUrl) {\n      const url = originalGetWorkerUrl(moduleId, label);\n      if (url) return url;\n    }\n    \n    // 言語固有のワーカーをマッピング\n    // YAMLは独自実装するので除外\n    if (label === 'json') {\n      return 'https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/vs/language/json/json.worker.js';\n    } else if (label === 'typescript' || label === 'javascript') {\n      return 'https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/vs/language/typescript/ts.worker.js';\n    } else if (label === 'html' || label === 'css') {\n      return 'https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/vs/language/html/html.worker.js';\n    }\n    \n    // デフォルトのエディタワーカー\n    return 'https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/vs/editor/editor.worker.js';\n  };\n}\n\n// Monaco Editorを動的インポート\nconst MonacoEditor = dynamic(() => import('@monaco-editor/react'), {\n  ssr: false,\n  loading: () => (\n    <div className=\"flex items-center justify-center min-h-[300px] border rounded-md bg-muted/30\">\n      <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n    </div>\n  ),\n});\n\n// プロパティの型定義\ntype CodeEditorProps = {\n  value: string;\n  onChange: (value: string) => void;\n  language?: SupportedLanguage;\n  height?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  showValidation?: boolean;\n  theme?: 'vs' | 'vs-dark' | 'hc-black' | 'hc-light';\n  onValidationChange?: (hasErrors: boolean) => void;\n};\n\n// 言語サポートを設定する関数\nconst setupLanguageSupport = async (monaco: any, language: SupportedLanguage) => {\n  if (!monaco) return;\n\n  try {\n    // 言語プラグインを動的にインポート\n    const plugin = await importLanguagePlugin(language);\n    \n    if (plugin) {\n      // プラグインのロード処理を実行\n      await plugin.load();\n      \n      // 言語固有の設定があれば適用\n      if (plugin.configure) {\n        plugin.configure(monaco);\n      }\n    } else {\n      console.warn(`言語 '${language}' のプラグインが見つかりません。基本的な構文ハイライトのみが利用可能です。`);\n    }\n  } catch (error) {\n    console.error(`言語 '${language}' のサポート設定中にエラーが発生しました:`, error);\n  }\n};\n\nexport const CodeEditor: React.FC<CodeEditorProps> = ({\n  value,\n  onChange,\n  language = 'plaintext',\n  height = '300px',\n  placeholder = 'コードを入力してください',\n  disabled = false,\n  readOnly = false,\n  showValidation = true,\n  theme: propTheme,\n  onValidationChange,\n}) => {\n  const editorRef = useRef<any>(null);\n  const monacoRef = useRef<any>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n  const { resolvedTheme } = useTheme();\n  \n  // テーマの決定: プロパティで指定された場合はそれを使用、それ以外はアプリケーションのテーマに従う\n  const theme = propTheme || (resolvedTheme === 'dark' ? 'vs-dark' : 'vs');\n  \n  // システムテーマが変更された時にエディタのテーマも更新\n  useEffect(() => {\n    if (!propTheme && editorRef.current && monacoRef.current) {\n      const newTheme = resolvedTheme === 'dark' ? 'vs-dark' : 'vs';\n      monacoRef.current.editor.setTheme(newTheme);\n    }\n  }, [resolvedTheme, propTheme]);\n  \n  // エディタが初期化されたときの処理\n  const handleEditorDidMount = async (editor: any, monaco: any) => {\n    editorRef.current = editor;\n    monacoRef.current = monaco;\n\n    // 初期テーマを明示的に設定\n    const currentTheme = resolvedTheme === 'dark' ? 'vs-dark' : 'vs';\n    monaco.editor.setTheme(currentTheme);\n\n    // 言語サポートの設定\n    await setupLanguageSupport(monaco, language);\n\n    // エラーマーカーの変更を監視\n    monaco.editor.onDidChangeMarkers(([resource]: any[]) => {\n      if (editor.getModel() && editor.getModel().uri.toString() === resource.toString()) {\n        const markers = monaco.editor.getModelMarkers({ resource });\n        const errorMarkers = markers.filter((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n        \n        // エラーの有無を状態に保存\n        const newHasErrors = errorMarkers.length > 0;\n        setHasErrors(newHasErrors);\n        \n        // エラーがある場合はエラーメッセージを設定\n        if (errorMarkers.length > 0) {\n          const firstError = errorMarkers[0];\n          setError(`${firstError.message} (行 ${firstError.startLineNumber}, 列 ${firstError.startColumn})`);\n        } else {\n          setError(null);\n        }\n\n        // 親コンポーネントにエラー状態を通知\n        onValidationChange?.(newHasErrors);\n      }\n    });\n\n    // プレースホルダーテキストの設定\n    if (!value && placeholder) {\n      editor.getModel()?.setValue(placeholder);\n      editor.onDidFocusEditorText(() => {\n        if (editor.getValue() === placeholder) {\n          editor.getModel()?.setValue('');\n        }\n      });\n      editor.onDidBlurEditorText(() => {\n        if (editor.getValue() === '') {\n          editor.getModel()?.setValue(placeholder);\n        }\n      });\n    }\n  };\n\n  // 言語が変更されたときに言語サポートを再設定\n  useEffect(() => {\n    if (monacoRef.current) {\n      setupLanguageSupport(monacoRef.current, language).catch(err => {\n        console.error('言語サポートの再設定中にエラーが発生しました:', err);\n      });\n    }\n  }, [language]);\n\n  // エディタの内容が変更されたときの処理\n  const handleEditorChange = (newValue: string | undefined) => {\n    if (readOnly || disabled) return;\n    \n    const content = newValue || '';\n    onChange(content);\n  };\n\n  // 言語ラベルの取得\n  const languageLabel = getLanguageLabel(language);\n\n  return (\n    <div className=\"space-y-2\">\n      <div \n        className={`border rounded-md overflow-hidden relative ${error ? 'border-destructive' : 'border-input'} ${readOnly ? 'bg-muted/30' : ''}`}\n      >\n        {/* 言語ラベルバッジ */}\n        <div className=\"absolute top-1 right-1 z-10 px-2 py-0.5 rounded bg-primary/10 text-xs font-medium text-primary-foreground backdrop-blur-sm\">\n          {languageLabel}\n        </div>\n\n        <MonacoEditor\n          value={value}\n          onChange={handleEditorChange}\n          language={language}\n          height={height}\n          theme={theme}\n          options={{\n            minimap: { enabled: true },\n            scrollBeyondLastLine: false,\n            lineNumbers: 'on',\n            folding: true,\n            wordWrap: 'on',\n            automaticLayout: true,\n            contextmenu: true,\n            scrollbar: {\n              useShadows: false,\n              verticalScrollbarSize: 10,\n              horizontalScrollbarSize: 10,\n              alwaysConsumeMouseWheel: false\n            },\n            lineNumbersMinChars: 3,\n            readOnly: readOnly || disabled,\n            renderLineHighlight: 'all',\n          }}\n          onMount={handleEditorDidMount}\n        />\n      </div>\n      {showValidation && error && (\n        <div className=\"text-xs text-destructive\">{error}</div>\n      )}\n    </div>\n  );\n};\n\nexport default CodeEditor; ",
      "type": "registry:component"
    }
  ]
}