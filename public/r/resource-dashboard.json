{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resource-dashboard",
  "type": "registry:component",
  "title": "Resource Dashboard",
  "description": "A resource dashboard component.",
  "dependencies": [
    "next-intl",
    "swr"
  ],
  "registryDependencies": [
    "sonner",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/actions.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/delete-confirmation.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/resource-delete.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/resource-view.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/resource-dashboard/resource-dashboard.tsx",
      "content": "'use client'\n\nimport { useState, useEffect, useMemo, useCallback } from 'react'\nimport { ResourceView } from '@/registry/new-york/blocks/resource-view/resource-view'\nimport useSWR from 'swr'\nimport { DeleteConfirmationDialog } from '@/registry/new-york/blocks/delete-confirmation/delete-confirmation'\nimport { \n  useResourceDeletion, \n  getDefaultResourceIdentifier, \n  ResourceIdentifierConfig \n} from '@/registry/new-york/blocks/resource-delete/resource-delete'\nimport { toast } from 'sonner'\nimport { useRouter } from 'next/navigation'\nimport { useTranslations } from 'next-intl'\nimport { fetchResources } from '@/registry/new-york/blocks/actions/resource-actions'\nimport { ColumnDef } from '@tanstack/react-table'\n\ninterface Action<T> {\n  label: string\n  handler: (selectedRows: T[]) => void\n  isDisabled?: (selectedRows: T[]) => boolean\n}\n\ninterface DependencyCheck {\n  hasDependencies: boolean\n  message?: string\n}\n\ninterface ResourceDashboardProps<T> {\n  resourceType: string\n  columns: ColumnDef<T>[]\n  apiUrl: string\n  deleteUrl: (id: string) => string\n  createPath?: string\n  editPath?: (id: string) => string\n  customActions?: Action<T>[]\n  disableDefaultActions?: boolean\n  checkDependencies?: (resource: T) => Promise<DependencyCheck>\n  getResourceIdentifier?: (resource: T) => string\n  identifierConfig?: ResourceIdentifierConfig\n}\n\n// サーバーアクションを使用するためのfetcher\nconst fetcher = (url: string) => fetchResources(url)\n\nexport default function ResourceDashboard<T extends Record<string, unknown>>({\n  resourceType,\n  columns,\n  apiUrl,\n  deleteUrl,\n  createPath,\n  editPath,\n  customActions = [],\n  disableDefaultActions = false,\n  checkDependencies,\n  getResourceIdentifier,\n  identifierConfig\n}: ResourceDashboardProps<T>) {\n  const router = useRouter()\n  const { data, error: fetchError, isLoading, mutate } = useSWR<T[]>(apiUrl, fetcher)\n  const [dependencyChecks, setDependencyChecks] = useState<Record<string, DependencyCheck>>({})\n  const t = useTranslations('components.resource-dashboard')\n  \n  const getResourceId = useMemo(() => {\n    return getResourceIdentifier || \n      ((resource: T) => getDefaultResourceIdentifier(resource, identifierConfig))\n  }, [getResourceIdentifier, identifierConfig])\n  \n  useEffect(() => {\n    const checkAllDependencies = async () => {\n      if (!data || !Array.isArray(data) || !checkDependencies) return\n\n      try {\n        const checks = await Promise.all(\n          data.map(async (resource) => {\n            try {\n              const check = await checkDependencies(resource)\n              const resourceKey = getResourceId(resource)\n              return [resourceKey, check] as const\n            } catch {\n              console.error(`Error checking dependencies for resource:`)\n              return [getResourceId(resource), { hasDependencies: false }] as const\n            }\n          })\n        )\n\n        setDependencyChecks(Object.fromEntries(checks))\n      } catch {\n        toast.error(t('error'), {\n          description: t('dependencyerror'),\n          duration: 5000,\n        })\n      }\n    }\n\n    checkAllDependencies()\n  }, [data, checkDependencies, getResourceId, t])\n\n  const {\n    selectedResources,\n    isDeleteDialogOpen,\n    error: deleteError,\n    successMessage,\n    openDeleteDialog,\n    handleDelete,\n    closeDeleteDialog,\n    getResourceDisplayName\n  } = useResourceDeletion<T>({\n    resourceType,\n    mutate,\n    deleteUrl,\n    getResourceIdentifier: getResourceId,\n    identifierConfig\n  })\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(t('deletesuccess'), {\n        description: successMessage,\n        duration: 3000,\n      })\n    }\n  }, [successMessage, t])\n\n  useEffect(() => {\n    if (fetchError) {\n      const errorMessage = fetchError instanceof Error ? fetchError.message : t('fetcherror')\n      toast.error(t('error'), {\n        description: errorMessage,\n        duration: 5000,\n      })\n    }\n  }, [fetchError, t])\n\n  useEffect(() => {\n    if (deleteError) {\n      toast.error(t('error'), {\n        description: deleteError,\n        duration: 5000,\n      })\n    }\n  }, [deleteError, t])\n\n  const handleCreate = createPath ? () => router.push(createPath) : undefined\n\n  const editFunction = useCallback((selectedRows: T[]) => {\n    if (selectedRows.length === 1 && editPath) {\n      const resourceId = getResourceId(selectedRows[0])\n      router.push(editPath(resourceId))\n    } else {\n      toast.error(t('error'), {\n        description: t('editerror'),\n        duration: 3000,\n      })\n    }\n  }, [editPath, getResourceId, router, t]);\n\n  const handleEdit = editPath ? editFunction : undefined;\n\n  const isDeleteDisabled = useCallback((selectedRows: T[]) => {\n    return selectedRows.some(resource => {\n      const resourceKey = getResourceId(resource)\n      return dependencyChecks[resourceKey]?.hasDependencies\n    })\n  }, [dependencyChecks, getResourceId])\n\n  const handleDeleteWithCheck = useCallback((selectedRows: T[]) => {\n    const hasBlockingDependencies = isDeleteDisabled(selectedRows)\n    if (hasBlockingDependencies) {\n      const messages = selectedRows\n        .map(resource => {\n          const resourceKey = getResourceId(resource)\n          return dependencyChecks[resourceKey]?.message\n        })\n        .filter(Boolean)\n      toast.error(t('error'), {\n        description: messages[0] || t('deleteerror'),\n        duration: 5000,\n      })\n      return\n    }\n    openDeleteDialog(selectedRows)\n  }, [dependencyChecks, getResourceId, isDeleteDisabled, openDeleteDialog, t])\n\n  const defaultActions: Action<T>[] = useMemo(() => [\n    ...(handleEdit ? [{ label: t('edit'), handler: handleEdit }] : []),\n    { \n      label: t('delete'), \n      handler: handleDeleteWithCheck,\n      isDisabled: isDeleteDisabled\n    },\n  ], [handleEdit, handleDeleteWithCheck, isDeleteDisabled, t])\n\n  const actions = disableDefaultActions ? customActions : [...defaultActions, ...customActions]\n\n  const safeData = Array.isArray(data) ? data : []\n\n  return (\n    <>\n      <ResourceView\n        title={`${resourceType}`}\n        columns={columns}\n        data={safeData}\n        mutate={mutate}\n        onCreate={handleCreate}\n        actions={actions}\n        isLoading={isLoading}\n        error={undefined}\n      />\n      <DeleteConfirmationDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        onConfirm={handleDelete}\n        resourceNames={selectedResources.map(resource => getResourceDisplayName(resource))}\n      />\n    </>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/messages/en.json",
      "content": "{\n  \"components\": {\n    \"resource-dashboard\": {\n      \"error\": \"Error\",\n      \"dependencyerror\": \"An error occurred while checking dependencies\",\n      \"deletesuccess\": \"Delete successful\",\n      \"fetcherror\": \"An error occurred while fetching data\",\n      \"editerror\": \"Please select one resource to edit\",\n      \"deleteerror\": \"Cannot delete due to existing dependent resources\",\n      \"edit\": \"Edit\",\n      \"delete\": \"Delete\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "messages/components/resource-dashboard/en.json"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/messages/ja.json",
      "content": "{\n  \"components\": {\n    \"resource-dashboard\": {\n      \"error\": \"エラー\",\n      \"dependencyerror\": \"依存関係のチェック中にエラーが発生しました\",\n      \"deletesuccess\": \"削除成功\",\n      \"fetcherror\": \"データの取得中にエラーが発生しました\",\n      \"editerror\": \"編集するには1つのリソースを選択してください\",\n      \"deleteerror\": \"依存するリソースが存在するため削除できません\",\n      \"edit\": \"編集\",\n      \"delete\": \"削除\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "messages/components/resource-dashboard/ja.json"
    }
  ]
}