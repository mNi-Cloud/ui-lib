{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resource-dashboard",
  "type": "registry:component",
  "title": "Resource Dashboard",
  "description": "A resource dashboard component.",
  "files": [
    {
      "path": "registry/new-york/blocks/resource-dashboard/resource-dashboard.tsx",
      "content": "'use client'\n\nimport { useState, useEffect, useMemo } from 'react'\nimport { ResourceView } from '@/registry/new-york/blocks/resource-dashboard/resource-view'\nimport useSWR from 'swr'\nimport { DeleteConfirmationDialog } from '@/registry/new-york/blocks/delete-confirmation/delete-confirmation'\nimport { useResourceDeletion } from '@/registry/new-york/blocks/resource-delete/resource-delete'\nimport { toast } from 'sonner'\nimport { useRouter } from 'next/navigation'\nimport { useTranslations } from 'next-intl'\n\ninterface Action<T> {\n  label: string\n  handler: (selectedRows: T[]) => void\n  isDisabled?: (selectedRows: T[]) => boolean\n}\n\ninterface DependencyCheck {\n  hasDependencies: boolean\n  message?: string\n}\n\ninterface ResourceDashboardProps<T> {\n  resourceType: string\n  columns: any[]\n  apiUrl: string\n  deleteUrl: (name: string) => string\n  createPath?: string\n  editPath?: (id: string) => string\n  customActions?: Action<T>[]\n  disableDefaultActions?: boolean\n  checkDependencies?: (resource: T) => Promise<DependencyCheck>\n}\n\nconst fetcher = async (url: string) => {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error(`API error: ${response.statusText}`)\n  }\n  const data = await response.json()\n  if (!Array.isArray(data)) {\n    throw new Error('API response is not an array')\n  }\n  return data\n}\n\nexport default function ResourceDashboard<T extends { name: string }>({\n  resourceType,\n  columns,\n  apiUrl,\n  deleteUrl,\n  createPath,\n  editPath,\n  customActions = [],\n  disableDefaultActions = false,\n  checkDependencies\n}: ResourceDashboardProps<T>) {\n  const router = useRouter()\n  const { data, error: fetchError, isLoading, mutate } = useSWR<T[]>(apiUrl, fetcher)\n  const [dependencyChecks, setDependencyChecks] = useState<Record<string, DependencyCheck>>({})\n  const t = useTranslations('component.resource-dashboard')\n  \n  useEffect(() => {\n    const checkAllDependencies = async () => {\n      if (!data || !Array.isArray(data) || !checkDependencies) return\n\n      try {\n        const checks = await Promise.all(\n          data.map(async (resource) => {\n            try {\n              const check = await checkDependencies(resource)\n              return [resource.name, check] as const\n            } catch (error) {\n              console.error(`Error checking dependencies for ${resource.name}:`, error)\n              return [resource.name, { hasDependencies: false }] as const\n            }\n          })\n        )\n\n        setDependencyChecks(Object.fromEntries(checks))\n      } catch (error) {\n        toast.error(t('error'), {\n          description: t('dependencyerror'),\n          duration: 5000,\n        })\n      }\n    }\n\n    checkAllDependencies()\n  }, [data, checkDependencies])\n\n  const {\n    selectedResources,\n    isDeleteDialogOpen,\n    error: deleteError,\n    successMessage,\n    openDeleteDialog,\n    handleDelete,\n    closeDeleteDialog\n  } = useResourceDeletion<T>({\n    resourceType,\n    mutate,\n    deleteUrl\n  })\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(t('deletesuccess'), {\n        description: successMessage,\n        duration: 3000,\n      })\n    }\n  }, [successMessage])\n\n  useEffect(() => {\n    if (fetchError) {\n      const errorMessage = fetchError instanceof Error ? fetchError.message : t('fetcherror')\n      toast.error(t('error'), {\n        description: errorMessage,\n        duration: 5000,\n      })\n    }\n  }, [fetchError])\n\n  useEffect(() => {\n    if (deleteError) {\n      toast.error(t('error'), {\n        description: deleteError,\n        duration: 5000,\n      })\n    }\n  }, [deleteError])\n\n  const handleCreate = createPath ? () => router.push(createPath) : undefined\n\n  const handleEdit = editPath ? (selectedRows: T[]) => {\n    if (selectedRows.length === 1 && selectedRows[0]?.name && editPath) {\n      router.push(editPath(selectedRows[0].name))\n    } else {\n      toast.error(t('error'), {\n        description: t('editerror'),\n        duration: 3000,\n      })\n    }\n  } : undefined\n\n  const isDeleteDisabled = (selectedRows: T[]) => {\n    return selectedRows.some(resource => \n      dependencyChecks[resource.name]?.hasDependencies\n    )\n  }\n\n  const handleDeleteWithCheck = (selectedRows: T[]) => {\n    const hasBlockingDependencies = isDeleteDisabled(selectedRows)\n    if (hasBlockingDependencies) {\n      const messages = selectedRows\n        .map(resource => dependencyChecks[resource.name]?.message)\n        .filter(Boolean)\n      toast.error(t('error'), {\n        description: messages[0] || t('deleteerror'),\n        duration: 5000,\n      })\n      return\n    }\n    openDeleteDialog(selectedRows)\n  }\n\n  const defaultActions: Action<T>[] = useMemo(() => [\n    ...(handleEdit ? [{ label: t('edit'), handler: handleEdit }] : []),\n    { \n      label: t('delete'), \n      handler: handleDeleteWithCheck,\n      isDisabled: isDeleteDisabled\n    },\n  ], [handleEdit, handleDeleteWithCheck, isDeleteDisabled])\n\n  const actions = disableDefaultActions ? customActions : [...defaultActions, ...customActions]\n\n  const safeData = Array.isArray(data) ? data : []\n\n  return (\n    <>\n      <ResourceView\n        title={`${resourceType}`}\n        columns={columns}\n        data={safeData}\n        mutate={mutate}\n        onCreate={handleCreate}\n        actions={actions}\n        isLoading={isLoading}\n        error={fetchError}\n      />\n      <DeleteConfirmationDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        onConfirm={handleDelete}\n        resourceNames={selectedResources.map(resource => resource.name)}\n      />\n    </>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/resource-view.tsx",
      "content": "import { useState } from 'react'\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/registry/new-york/ui/alert\"\nimport { RefreshCw, ChevronDown, Plus } from \"lucide-react\"\nimport { ExclamationTriangleIcon } from \"@radix-ui/react-icons\"\nimport { DataTable } from \"@/registry/new-york/blocks/resource-dashboard/data-table\"\nimport { KeyedMutator } from 'swr'\nimport { useTranslations } from 'next-intl'\n\ninterface Action<TData> {\n  label: string\n  handler: (selectedRows: TData[]) => void\n  isDisabled?: (selectedRows: TData[]) => boolean\n}\n\ninterface ResourceViewProps<TData extends object> {\n  title: string\n  columns: ColumnDef<TData>[]\n  data: TData[] | undefined\n  mutate: KeyedMutator<TData[]>\n  onCreate?: () => void\n  actions: Action<TData>[]\n  isLoading: boolean\n  error: Error | undefined\n}\n\nexport function ResourceView<TData extends object>({\n  title,\n  columns,\n  data,\n  mutate,\n  onCreate,\n  actions,\n  isLoading,\n  error,\n}: ResourceViewProps<TData>) {\n  const [selectedRows, setSelectedRows] = useState<TData[]>([])\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const t = useTranslations('component.resource-view')\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true)\n    try {\n      await mutate()\n    } catch (error) {\n      console.error('Refresh failed:', error)\n    } finally {\n      setIsRefreshing(false)\n    }\n  }\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <ExclamationTriangleIcon className=\"h-4 w-4\" />\n        <AlertTitle>{t('error')}</AlertTitle>\n        <AlertDescription>{t('fetcherror')}</AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <div className=\"pt-4\">\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 space-y-2 sm:space-y-0\">\n        <h1 className=\"text-2xl font-bold\">{title}</h1>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" className=\"h-9 w-9 p-0\" onClick={handleRefresh} disabled={isRefreshing || isLoading}>\n            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </Button>\n          {actions.length > 0 && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button size=\"sm\" variant=\"outline\" disabled={isLoading || isRefreshing}>\n                <ChevronDown className=\"mr-2 h-4 w-4\" />{t('action')}\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {actions.map((action, index) => (\n                  <DropdownMenuItem\n                    key={index}\n                    onClick={() => action.handler(selectedRows)}\n                    disabled={action.isDisabled ? action.isDisabled(selectedRows) : false}\n                  >\n                    {action.label}\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n          {onCreate && (\n            <Button size=\"sm\" onClick={onCreate} disabled={isLoading || isRefreshing}>\n              <Plus className=\"mr-2 h-4 w-4\" />{t('create')}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <DataTable\n        columns={columns}\n        data={data || []}\n        onRowSelectionChange={setSelectedRows}\n        isLoading={isLoading || isRefreshing}\n      />\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/data-table.tsx",
      "content": "import { useState, useEffect, useCallback } from 'react'\nimport { useTranslations } from 'next-intl'\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  getPaginationRowModel,\n  getSortedRowModel,\n  getFilteredRowModel,\n  SortingState,\n  VisibilityState,\n} from \"@tanstack/react-table\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/new-york/ui/table\"\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Separator } from '@/registry/new-york/ui/separator'\nimport { Loader2, ChevronRight, ChevronLeft } from 'lucide-react'\nimport { TableSetting } from \"@/registry/new-york/blocks/resource-dashboard/table-setting\"\nimport { TableSearch } from \"@/registry/new-york/blocks/resource-dashboard/table-search\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  onRowSelectionChange?: (selectedRows: TData[]) => void\n  isLoading?: boolean\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  onRowSelectionChange,\n  isLoading = false,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = useState<SortingState>([])\n  const [rowSelection, setRowSelection] = useState({})\n  const [pageSize, setPageSize] = useState(10)\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})\n  const [globalFilter, setGlobalFilter] = useState(\"\")\n  const t = useTranslations('component.data-table')\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onSortingChange: setSorting,\n    onRowSelectionChange: setRowSelection,\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      rowSelection,\n      columnVisibility,\n      globalFilter,\n    },\n    initialState: {\n      pagination: { pageSize },\n    },\n  })\n\n  useEffect(() => {\n    if (onRowSelectionChange) {\n      const selectedRows = table.getFilteredSelectedRowModel().rows.map(row => row.original)\n      onRowSelectionChange(selectedRows)\n    }\n  }, [rowSelection, onRowSelectionChange, table])\n\n  const handleApplySettings = useCallback((newPageSize: number, newColumnVisibility: VisibilityState) => {\n    setPageSize(newPageSize)\n    table.setPageSize(newPageSize)\n    setColumnVisibility(newColumnVisibility)\n  }, [table])\n\n  const renderPagination = useCallback(() => {\n    const currentPage = table.getState().pagination.pageIndex + 1\n    const totalPages = table.getPageCount()\n\n    return (\n      <div className=\"flex items-center gap-2\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"flex items-center text-sm text-muted-foreground whitespace-nowrap min-w-[48px] justify-center\">\n          <span>{currentPage}</span>\n          <span className=\"mx-1\">/</span>\n          <span>{totalPages}</span>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    )\n  }, [table])\n\n  const renderTableBody = useCallback(() => {\n    if (isLoading) {\n      return (\n        <TableRow>\n          <TableCell colSpan={columns.length + 1} className=\"h-24\">\n            <div className=\"flex justify-center items-center\">\n              <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n            </div>\n          </TableCell>\n        </TableRow>\n      )\n    }\n\n    if (table.getRowModel().rows?.length) {\n      return table.getRowModel().rows.map((row) => (\n        <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n          <TableCell>\n            <Checkbox\n              checked={row.getIsSelected()}\n              onCheckedChange={(value) => row.toggleSelected(!!value)}\n              aria-label=\"Select row\"\n            />\n          </TableCell>\n          {row.getVisibleCells().map((cell) => (\n            <TableCell key={cell.id} className=\"whitespace-nowrap\">\n              {flexRender(cell.column.columnDef.cell, cell.getContext())}\n            </TableCell>\n          ))}\n        </TableRow>\n      ))\n    }\n\n    return (\n      <TableRow>\n        <TableCell colSpan={columns.length + 1} className=\"h-24 text-center\">\n          {t('noresults')}\n        </TableCell>\n      </TableRow>\n    )\n  }, [isLoading, columns, table])\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between mb-2 gap-4 flex-wrap\">\n        <TableSearch\n          value={globalFilter}\n          onChange={setGlobalFilter}\n        />\n        <div className=\"flex items-center gap-2\">\n          {renderPagination()}\n          <Separator orientation=\"vertical\" className=\"h-4\" />\n          <TableSetting\n            columns={table.getAllColumns()}\n            pageSize={pageSize}\n            columnVisibility={columnVisibility}\n            onApplySettings={handleApplySettings}\n          />\n        </div>\n      </div>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>\n              <Checkbox\n                checked={table.getIsAllPageRowsSelected()}\n                onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n                aria-label=\"Select all\"\n                disabled={isLoading}\n              />\n            </TableHead>\n            {table.getHeaderGroups().map((headerGroup) =>\n              headerGroup.headers.map((header) => {\n                const column = header.column;\n                return column.getIsVisible() ? (\n                  <TableHead key={header.id} className=\"whitespace-nowrap\">\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                  </TableHead>\n                ) : null;\n              })\n            )}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {renderTableBody()}\n        </TableBody>\n      </Table>\n      <div className=\"flex items-center space-x-2\">\n        <p className=\"text-sm text-muted-foreground\">\n          {t('rowselect', {\n            selected: table.getFilteredSelectedRowModel().rows.length,\n            total: table.getFilteredRowModel().rows.length\n          })}\n        </p>\n      </div>\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/table-setting.tsx",
      "content": "import { useState } from 'react'\nimport { Column } from \"@tanstack/react-table\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Input } from \"@/registry/new-york/ui/input\"\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\"\nimport { Switch } from \"@/registry/new-york/ui/switch\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/registry/new-york/ui/dialog\"\nimport { Label } from \"@/registry/new-york/ui/label\"\nimport { Settings } from 'lucide-react'\nimport { useTranslations } from 'next-intl'\n\ninterface TableSettingProps {\n  columns: Column<any, unknown>[]\n  pageSize: number\n  columnVisibility: Record<string, boolean>\n  onApplySettings: (newPageSize: number, newColumnVisibility: Record<string, boolean>) => void\n}\n\nexport function TableSetting({\n  columns,\n  pageSize,\n  columnVisibility,\n  onApplySettings\n}: TableSettingProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [tempPageSize, setTempPageSize] = useState<number | 'custom'>(pageSize)\n  const [tempColumnVisibility, setTempColumnVisibility] = useState(columnVisibility)\n  const [customPageSize, setCustomPageSize] = useState('')\n  const t = useTranslations('component.table-setting')\n\n  const handleApply = () => {\n    const newPageSize = tempPageSize === 'custom' ? parseInt(customPageSize, 10) : tempPageSize\n    if (!isNaN(newPageSize) && newPageSize > 0) {\n      onApplySettings(newPageSize, tempColumnVisibility)\n    }\n    setIsOpen(false)\n  }\n\n  const handleCancel = () => {\n    setTempPageSize(pageSize)\n    setTempColumnVisibility(columnVisibility)\n    setCustomPageSize('')\n    setIsOpen(false)\n  }\n\n  const handleColumnVisibilityChange = (columnId: string, isVisible: boolean) => {\n    setTempColumnVisibility(prev => ({ ...prev, [columnId]: isVisible }))\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\">\n          <Settings className=\"h-4 w-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[700px]\">\n        <DialogHeader>\n          <DialogTitle>{t('title')}</DialogTitle>\n        </DialogHeader>\n        <div className=\"flex gap-4 py-4\">\n          <div className=\"w-1/2 pr-4 border-r\">\n            <h3 className=\"text-lg font-semibold mb-4\">{t('pagesize')}</h3>\n            <RadioGroup\n              value={tempPageSize.toString()}\n              onValueChange={(value) => {\n                setTempPageSize(value === 'custom' ? 'custom' : parseInt(value, 10))\n              }}\n            >\n              {[10, 20, 30].map((size) => (\n                <div key={size} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value={size.toString()} id={`size-${size}`} />\n                  <Label htmlFor={`size-${size}`}>{size}{t('row')}</Label>\n                </div>\n              ))}\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"custom\" id=\"size-custom\" />\n                <Label htmlFor=\"size-custom\">{t('custom')}:</Label>\n                <Input\n                  type=\"number\"\n                  value={customPageSize}\n                  onChange={(e) => setCustomPageSize(e.target.value)}\n                  className=\"w-20\"\n                  min=\"1\"\n                />\n              </div>\n            </RadioGroup>\n          </div>\n          <div className=\"w-1/2 pl-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">{t('column')}</h3>\n            {columns.map((column) => (\n              <div key={column.id} className=\"flex items-center justify-between py-2\">\n                <Label htmlFor={`column-${column.id}`}>\n                  {column.columnDef.header && typeof column.columnDef.header === 'string'\n                    ? column.columnDef.header\n                    : column.id}\n                </Label>\n                <Switch\n                  checked={tempColumnVisibility[column.id] !== false}\n                  onCheckedChange={(value) => handleColumnVisibilityChange(column.id, value)}\n                  id={`column-${column.id}`}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n        <DialogFooter>\n          <Button variant=\"ghost\" onClick={handleCancel}>{t('cancel')}</Button>\n          <Button onClick={handleApply}>{t('apply')}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/table-search.tsx",
      "content": "import { Input } from \"@/registry/new-york/ui/input\"\nimport { Search, X } from \"lucide-react\"\nimport { Button } from \"@/registry/new-york/ui/button\"\n\ninterface TableSearchProps {\n  value: string\n  onChange: (value: string) => void\n  placeholder?: string\n}\n\nexport function TableSearch({\n  value,\n  onChange,\n  placeholder = 'Search'\n}: TableSearchProps) {\n  return (\n    <div className=\"relative\">\n      <Search className=\"absolute left-2 top-2 h-4 w-4 text-muted-foreground\" />\n      <Input\n        placeholder={placeholder}\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"pl-8 pr-8 h-8\"\n      />\n      {value && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute right-1 top-1.5 h-6 w-6 p-0 hover:bg-transparent\"\n          onClick={() => onChange(\"\")}\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/messages/en.json",
      "content": "{\n  \"component\": {\n    \"data-table\": {\n      \"noresults\": \"No results\",\n      \"rowselect\": \"{selected} of {total} row(s) selected.\"\n    },\n    \"resource-dashboard\": {\n      \"error\": \"Error\",\n      \"dependencyerror\": \"An error occurred while checking dependencies\",\n      \"deletesuccess\": \"Delete successful\",\n      \"fetcherror\": \"An error occurred while fetching data\",\n      \"editerror\": \"Please select one resource to edit\",\n      \"deleteerror\": \"Cannot delete due to existing dependent resources\",\n      \"edit\": \"Edit\",\n      \"delete\": \"Delete\"\n    },\n    \"resource-view\": {\n      \"error\": \"Error\",\n      \"fetcherror\": \"Failed to fetch resource\",\n      \"action\": \"Action\",\n      \"create\": \"Create\"\n    },\n    \"table-setting\": {\n      \"title\": \"Table Settings\",\n      \"pagesize\": \"Page Size\",\n      \"row\": \"rows\",\n      \"custom\": \"Custom\",\n      \"column\": \"Display Columns\",\n      \"cancel\": \"Cancel\",\n      \"apply\": \"Apply\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "messages/components/resource-dashboard/en.json"
    },
    {
      "path": "registry/new-york/blocks/resource-dashboard/messages/ja.json",
      "content": "{\n  \"component\": {\n    \"data-table\": {\n      \"noresults\": \"結果がありません\",\n      \"rowselect\": \"{selected} / {total} 行選択\"\n    },\n    \"resource-dashboard\": {\n      \"error\": \"エラー\",\n      \"dependencyerror\": \"依存関係のチェック中にエラーが発生しました\",\n      \"deletesuccess\": \"削除成功\",\n      \"fetcherror\": \"データの取得中にエラーが発生しました\",\n      \"editerror\": \"編集するには1つのリソースを選択してください\",\n      \"deleteerror\": \"依存するリソースが存在するため削除できません\",\n      \"edit\": \"編集\",\n      \"delete\": \"削除\"\n    },\n    \"resource-view\": {\n      \"error\": \"エラー\",\n      \"fetcherror\": \"リソースの取得に失敗しました\",\n      \"action\": \"アクション\",\n      \"create\": \"作成\"\n    },\n    \"table-setting\": {\n      \"title\": \"テーブル設定\",\n      \"pagesize\": \"ページサイズ\",\n      \"row\": \"行\",\n      \"custom\": \"カスタム\",\n      \"column\": \"表示列\",\n      \"cancel\": \"キャンセル\",\n      \"apply\": \"適用\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "messages/components/resource-dashboard/ja.json"
    }
  ]
}