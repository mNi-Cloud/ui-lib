{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "i18n",
  "type": "registry:file",
  "title": "i18n",
  "description": "i18n configuration.",
  "dependencies": [
    "next-intl"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/i18n/request.ts",
      "content": "import { getRequestConfig } from 'next-intl/server';\nimport { getUserLocale } from './locale';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nasync function loadAllMessages(dir: string, locale: string): Promise<Record<string, any>> {\n  let merged: Record<string, any> = {};\n\n  const entries = await fs.readdir(dir, { withFileTypes: true });\n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry.name);\n\n    if (entry.isDirectory()) {\n      const nested = await loadAllMessages(fullPath, locale);\n      Object.assign(merged, nested);\n    } else if (entry.isFile() && entry.name === `${locale}.json`) {\n      const raw = await fs.readFile(fullPath, 'utf-8');\n      const json = JSON.parse(raw);\n      Object.assign(merged, json);\n    }\n  }\n\n  return merged;\n}\n\nexport default getRequestConfig(async () => {\n  const locale = await getUserLocale();\n  const messagesDir = path.resolve(process.cwd(), 'messages');\n  const messages = await loadAllMessages(messagesDir, locale);\n\n  return {\n    locale,\n    messages\n  };\n});\n",
      "type": "registry:file",
      "target": "i18n/request.ts"
    },
    {
      "path": "registry/new-york/blocks/i18n/config.ts",
      "content": "export type Locale = (typeof locales)[number];\n\nexport const locales = ['ja', 'en'] as const;\nexport const defaultLocale: Locale = 'ja';",
      "type": "registry:file",
      "target": "i18n/config.ts"
    },
    {
      "path": "registry/new-york/blocks/i18n/locale.ts",
      "content": "'use server';\n\nimport { cookies } from 'next/headers';\nimport { Locale, defaultLocale } from './config'\n\nconst COOKIE_NAME = 'NEXT_LOCALE';\n\nexport async function getUserLocale() {\n  return (await cookies()).get(COOKIE_NAME)?.value || defaultLocale;\n}\n\nexport async function setUserLocale(locale: Locale) {\n  (await cookies()).set(COOKIE_NAME, locale);\n}",
      "type": "registry:file",
      "target": "i18n/locale.ts"
    }
  ]
}