{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "i18n",
  "type": "registry:file",
  "title": "i18n",
  "description": "i18n configuration.",
  "dependencies": [
    "next-intl",
    "deepmerge"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/i18n/request.ts",
      "content": "import { getRequestConfig } from 'next-intl/server';\nimport { getUserLocale } from './locale';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport deepmerge from 'deepmerge';\n\nasync function loadAllMessages(\n  dir: string,\n  locale: string\n): Promise<Record<string, any>> {\n  let merged: Record<string, any> = {};\n\n  try {\n    const entries = await fs.readdir(dir, { withFileTypes: true });\n    for (const entry of entries) {\n      const fullPath = path.join(dir, entry.name);\n\n      if (entry.isDirectory()) {\n        const nested = await loadAllMessages(fullPath, locale);\n        merged = deepmerge(merged, nested);\n      } else if (entry.isFile() && entry.name === `${locale}.json`) {\n        try {\n          const raw = await fs.readFile(fullPath, 'utf-8');\n          const json = JSON.parse(raw);\n          merged = deepmerge(merged, json);\n        } catch (err) {\n          console.error(`Failed to load or parse: ${fullPath}`, err);\n        }\n      }\n    }\n  } catch (err) {\n    console.error(`Failed to read directory: ${dir}`, err);\n    // Try alternative paths if the main one fails\n  }\n\n  return merged;\n}\n\nexport default getRequestConfig(async () => {\n  const locale = await getUserLocale();\n  \n  // Try multiple possible paths for messages directory\n  const possiblePaths = [\n    path.resolve(process.cwd(), 'messages'),\n    '/app/messages',\n    path.resolve(process.cwd(), '../messages')\n  ];\n  \n  let messages = {};\n  \n  // Try each path until we find one that works\n  for (const messagesDir of possiblePaths) {\n    try {\n      const exists = await fs.access(messagesDir).then(() => true).catch(() => false);\n      if (exists) {\n        messages = await loadAllMessages(messagesDir, locale);\n        console.log(`Successfully loaded messages from: ${messagesDir}`);\n        break;\n      }\n    } catch (err) {\n      console.error(`Failed to access: ${messagesDir}`, err);\n    }\n  }\n\n  return { locale, messages };\n});\n",
      "type": "registry:file",
      "target": "i18n/request.ts"
    },
    {
      "path": "registry/new-york/blocks/i18n/config.ts",
      "content": "export type Locale = (typeof locales)[number];\n\nexport const locales = ['ja', 'en'] as const;\nexport const defaultLocale: Locale = 'ja';",
      "type": "registry:file",
      "target": "i18n/config.ts"
    },
    {
      "path": "registry/new-york/blocks/i18n/locale.ts",
      "content": "'use server';\n\nimport { cookies } from 'next/headers';\nimport { Locale, defaultLocale } from './config'\n\nconst COOKIE_NAME = 'NEXT_LOCALE';\n\nexport async function getUserLocale() {\n  return (await cookies()).get(COOKIE_NAME)?.value || defaultLocale;\n}\n\nexport async function setUserLocale(locale: Locale) {\n  (await cookies()).set(COOKIE_NAME, locale);\n}",
      "type": "registry:file",
      "target": "i18n/locale.ts"
    }
  ]
}