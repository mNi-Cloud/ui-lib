{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resource-create-multiple",
  "type": "registry:component",
  "title": "Resource Create Multiple",
  "description": "A resource creation form component.",
  "dependencies": [
    "next-intl",
    "@hookform/resolvers",
    "react-hook-form",
    "zod",
    "yaml"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "select",
    "textarea",
    "form",
    "progress",
    "sonner"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/resource-create-multiple/resource-create-multiple.tsx",
      "content": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent } from '@/registry/new-york/ui/card';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { Input } from '@/registry/new-york/ui/input';\nimport { Textarea } from '@/registry/new-york/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/registry/new-york/ui/select';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from '@/registry/new-york/ui/form';\nimport { Progress } from '@/registry/new-york/ui/progress';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { toast } from 'sonner';\nimport { useTranslations } from 'next-intl'\nimport { YamlEditor } from '@/registry/new-york/blocks/resource-create-multiple/yaml-editor';\n// Import yaml differently to avoid browser/node environment issues\nimport * as YAML from 'yaml';\n\nexport type SelectOption = {\n  value: string;\n  label: string;\n};\n\nexport type UnitOption = {\n  value: string;\n  label: string;\n};\n\nexport type ValidationPattern = {\n  value: string;\n  flags?: string;\n  message: string;\n};\n\nexport type FieldDefinition = {\n  name: string;\n  label: string;\n  type: 'text' | 'number' | 'email' | 'password' | 'select' | 'unit-input' | 'textarea' | 'yaml' | 'custom';\n  placeholder?: string;\n  description?: string;\n  options?: SelectOption[];\n  units?: UnitOption[];\n  defaultUnit?: string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n  defaultValue?: string;\n  validation?: {\n    required?: boolean;\n    min?: number;\n    max?: number;\n    minLength?: number;\n    maxLength?: number;\n    pattern?: ValidationPattern;\n    yamlLint?: boolean;\n  };\n  // For custom component rendering\n  render?: (props: { values: any }) => React.ReactNode;\n};\n\n// Helper function to validate YAML content\nfunction validateYaml(content: string): { isValid: boolean; error?: string } {\n  if (!content.trim()) {\n    return { isValid: true };\n  }\n\n  try {\n    YAML.parse(content);\n    return { isValid: true };\n  } catch (error) {\n    return { \n      isValid: false, \n      error: error instanceof Error ? error.message : 'Invalid YAML format' \n    };\n  }\n}\n\nexport type StepDefinition = {\n  title: string;\n  description?: string;\n  fields: FieldDefinition[];\n};\n\nexport type MultiStepResourceCreateProps = {\n  title: string;\n  resourceType: string;\n  steps: StepDefinition[];\n  apiEndpoint: string;\n  redirectPath: string;\n  successMessage?: string;\n  errorMessage?: string;\n  formatFormData?: (data: any) => any;\n};\n\nconst MultiStepResourceCreate: React.FC<MultiStepResourceCreateProps> = ({\n  title,\n  steps,\n  apiEndpoint,\n  redirectPath,\n  successMessage,\n  errorMessage,\n  formatFormData\n}) => {\n  const router = useRouter();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState<{ [key: string]: any }>({});\n  const t = useTranslations('component.resource-create-multiple')\n\n  const messages = {\n    success: successMessage || t('successmessage'),\n    error: errorMessage || t('errormessage')\n  };\n\n  useEffect(() => {\n    if (steps.length === 0) {\n      toast.error(t('nostep'));\n      router.push(redirectPath);\n    }\n  }, [steps, redirectPath, router]);\n\n  useEffect(() => {\n    if (currentStep < 0 || currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [currentStep, steps.length]);\n\n  const getCurrentStepData = (): StepDefinition | null | undefined => {\n    if (currentStep < 0 || currentStep >= steps.length) {\n      return null;\n    }\n    return steps[currentStep];\n  };\n\n  const currentStepData = getCurrentStepData();\n\n  useEffect(() => {\n    currentStepData?.fields.forEach(field => {\n      if (field.type === 'unit-input') {\n        if (!form.getValues(`${field.name}Unit`)) {\n          const defaultUnit = field.defaultUnit || field.units?.[0]?.value || '';\n          form.setValue(`${field.name}Unit`, defaultUnit);\n        }\n      }\n    });\n  }, [currentStep, currentStepData?.fields]);\n\n  if (!currentStepData) {\n    return (\n      <div className=\"p-4\">\n        <p className=\"text-destructive\">{t('invalidstep')}</p>\n        <Button\n          className=\"mt-4\"\n          variant=\"outline\"\n          onClick={() => router.push(redirectPath)}\n        >\n          {t('back')}\n        </Button>\n      </div>\n    );\n  }\n\n  const generateZodSchema = (fields: FieldDefinition[]) => {\n    const schemaObject: { [key: string]: any } = {};\n\n    fields.forEach(field => {\n      if (field.type === 'unit-input') {\n        let valueSchema: z.ZodString = z.string();\n\n        if (field.validation?.required) {\n          valueSchema = valueSchema.min(1, t('need', { label: field.label }));\n        }\n\n        const finalValueSchema = valueSchema.superRefine((val, ctx) => {\n          if (val === '') return;\n\n          const num = Number(val);\n          if (isNaN(num)) {\n            ctx.addIssue({\n              code: z.ZodIssueCode.custom,\n              message: t('number'),\n            });\n            return;\n          }\n\n          if (field.validation?.min !== undefined && num < field.validation.min) {\n            ctx.addIssue({\n              code: z.ZodIssueCode.custom,\n              message: t('greater', { label: field.label, min: field.validation.min }),\n            });\n          }\n\n          if (field.validation?.max !== undefined && num > field.validation.max) {\n            ctx.addIssue({\n              code: z.ZodIssueCode.custom,\n              message: t('lesser', { label: field.label, max: field.validation.max }),\n            });\n          }\n        });\n\n        const unitSchema = z.string().min(1, t('unit'));\n\n        schemaObject[`${field.name}Value`] = finalValueSchema;\n        schemaObject[`${field.name}Unit`] = unitSchema;\n      } else {\n        let fieldSchema: z.ZodString = z.string();\n\n        if (field.validation) {\n          if (field.validation.required) {\n            fieldSchema = fieldSchema.min(1, t('need', { label: field.label }));\n          }\n\n          if (field.validation.maxLength) {\n            fieldSchema = fieldSchema.max(\n              field.validation.maxLength,\n              t('textlesser', { label: field.label, maxLength: field.validation.maxLength })\n            );\n          }\n\n          if (field.validation.pattern) {\n            const regex = new RegExp(\n              field.validation.pattern.value,\n              field.validation.pattern.flags\n            );\n            fieldSchema = fieldSchema.regex(regex, field.validation.pattern.message);\n          }\n        }\n\n        const finalFieldSchema = field.type === 'number'\n          ? fieldSchema.superRefine((val, ctx) => {\n            if (val === '') return;\n\n            const num = Number(val);\n            if (isNaN(num)) {\n              ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: t('number'),\n              });\n              return;\n            }\n\n            if (field.validation?.min !== undefined && num < field.validation.min) {\n              ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: t('greater', { label: field.label, min: field.validation.min }),\n              });\n            }\n\n            if (field.validation?.max !== undefined && num > field.validation.max) {\n              ctx.addIssue({\n                code: z.ZodIssueCode.custom,\n                message: t('lesser', { label: field.label, max: field.validation.max }),\n              });\n            }\n          })\n          : fieldSchema;\n\n        schemaObject[field.name] = finalFieldSchema;\n      }\n    });\n\n    return z.object(schemaObject);\n  };\n\n  const currentStepSchema = generateZodSchema(currentStepData.fields);\n  type FormValues = z.infer<typeof currentStepSchema>;\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(currentStepSchema),\n    defaultValues: {\n      ...currentStepData.fields.reduce((acc, field) => {\n        if (field.type === 'unit-input') {\n          const defaultUnit = field.defaultUnit || field.units?.[0]?.value || '';\n          return {\n            ...acc,\n            [`${field.name}Value`]: field.defaultValue?.toString() || '',\n            [`${field.name}Unit`]: defaultUnit\n          };\n        }\n        return {\n          ...acc,\n          [field.name]: field.defaultValue?.toString() || ''\n        };\n      }, {}),\n      ...formData\n    }\n  });\n\n  const handleStepSubmit = async (values: FormValues) => {\n    const updatedFormData = {\n      ...formData,\n      ...values\n    };\n\n    setFormData(updatedFormData);\n\n    if (currentStep === steps.length - 1) {\n      setLoading(true);\n      try {\n        const dataToSubmit = formatFormData ? formatFormData(updatedFormData) : updatedFormData;\n\n        const response = await fetch(apiEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n          },\n          body: JSON.stringify(dataToSubmit),\n        });\n        if (!response.ok) {\n          throw new Error(messages.error);\n        }\n\n        const firstField = steps[0]?.fields[0];\n        const resourceName = firstField\n          ? updatedFormData[firstField.name] || t('resource')\n          : t('resource');\n\n        toast.success(messages.success, {\n          description: t('created', { resourceName }),\n          duration: 5000,\n        });\n\n        router.push(redirectPath);\n      } catch (error) {\n        toast.error(t('error'), {\n          description: messages.error,\n          duration: 5000,\n        });\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      setCurrentStep(current => current + 1);\n    }\n  };\n\n  const onPreviousStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(current => current - 1);\n    }\n  };\n\n  const onCancel = () => {\n    router.push(redirectPath);\n    toast.info(t('cancelcreate'), {\n      duration: 3000,\n    });\n  };\n\n  const renderFormField = (field: FieldDefinition) => {\n    if (field.type === 'unit-input') {\n      return (\n        <div key={`form-field-${field.name}`} className=\"space-y-2\">\n          <div className=\"space-y-1\">\n            <FormLabel className=\"text-sm font-medium\">\n              {field.label}\n              {field.validation?.required && (\n                <span className=\"text-destructive ml-1\">*</span>\n              )}\n            </FormLabel>\n            {field.description && (\n              <FormDescription className=\"text-xs\">\n                {field.description}\n              </FormDescription>\n            )}\n          </div>\n\n          <div className=\"flex flex-col md:flex-row gap-2 w-full\">\n            <div className=\"flex-grow\">\n              <FormField\n                control={form.control}\n                name={`${field.name}Value`}\n                render={({ field: formField }) => (\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder={field.placeholder}\n                      className=\"h-10\"\n                      value={formField.value}\n                      onChange={(e) => {\n                        formField.onChange(e);\n                        const unit = form.getValues(`${field.name}Unit`);\n                        form.setValue(field.name, `${e.target.value}${unit}`);\n                      }}\n                    />\n                  </FormControl>\n                )}\n              />\n            </div>\n\n            <div className=\"w-full md:w-[160px]\">\n              <FormField\n                control={form.control}\n                name={`${field.name}Unit`}\n                render={({ field: formField }) => (\n                  <Select\n                    value={formField.value}\n                    defaultValue={field.defaultUnit} // デフォルト値の明示的設定\n                    onValueChange={(value) => {\n                      formField.onChange(value);\n                      const numValue = form.getValues(`${field.name}Value`);\n                      form.setValue(field.name, `${numValue}${value}`);\n                    }}\n                  >\n                    <FormControl>\n                      <SelectTrigger className=\"h-10\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {field.units?.map((unit) => (\n                        <SelectItem\n                          key={`${field.name}-unit-${unit.value}`}\n                          value={unit.value}\n                        >\n                          {unit.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                )}\n              />\n            </div>\n          </div>\n          <FormMessage className=\"text-xs\" />\n        </div>\n      );\n    }\n\n    if (field.type === 'yaml') {\n      return (\n        <FormField\n          key={`form-field-${field.name}`}\n          control={form.control}\n          name={field.name}\n          render={({ field: formField }) => (\n            <FormItem className=\"space-y-2\">\n              <div className=\"space-y-1\">\n                <FormLabel className=\"text-sm font-medium\">\n                  {field.label}\n                  {field.validation?.required && (\n                    <span className=\"text-destructive ml-1\">*</span>\n                  )}\n                </FormLabel>\n                {field.description && (\n                  <FormDescription className=\"text-xs\">\n                    {field.description}\n                  </FormDescription>\n                )}\n              </div>\n              <FormControl>\n                <YamlEditor\n                  value={formField.value}\n                  onChange={(value) => {\n                    formField.onChange(value);\n                    if (field.validation?.yamlLint) {\n                      const { isValid, error } = validateYaml(value);\n                      if (!isValid) {\n                        form.setError(field.name, {\n                          type: 'manual',\n                          message: error,\n                        });\n                      } else {\n                        form.clearErrors(field.name);\n                      }\n                    }\n                  }}\n                />\n              </FormControl>\n              <FormMessage className=\"text-xs\" />\n            </FormItem>\n          )}\n        />\n      );\n    }\n\n    return (\n      <FormField\n        key={`form-field-${field.name}`}\n        control={form.control}\n        name={field.name}\n        render={({ field: formField }) => (\n          <FormItem className=\"space-y-2\">\n            <div className=\"space-y-1\">\n              <FormLabel className=\"text-sm font-medium\">\n                {field.label}\n                {field.validation?.required && (\n                  <span className=\"text-destructive ml-1\">*</span>\n                )}\n              </FormLabel>\n              {field.description && (\n                <FormDescription className=\"text-xs\">\n                  {field.description}\n                </FormDescription>\n              )}\n            </div>\n            <FormControl>\n              {field.type === 'select' ? (\n                <Select\n                  value={formField.value}\n                  onValueChange={(value) => {\n                    formField.onChange(value);\n                    field.onChange?.(value);\n                  }}\n                  disabled={field.disabled}\n                >\n                  <SelectTrigger className=\"h-10\">\n                    <SelectValue placeholder={field.placeholder} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {field.options?.map((option) => (\n                      <SelectItem\n                        key={`${field.name}-option-${option.value}`}\n                        value={option.value}\n                      >\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              ) : field.type === 'textarea' ? (\n                <Textarea\n                  placeholder={field.placeholder}\n                  disabled={field.disabled}\n                  className=\"min-h-[200px] font-mono h-auto\"\n                  {...formField}\n                />\n              ) : (\n                <Input\n                  type={field.type}\n                  placeholder={field.placeholder}\n                  disabled={field.disabled}\n                  className=\"h-10\"\n                  {...formField}\n                />\n              )}\n            </FormControl>\n            <FormMessage className=\"text-xs\" />\n          </FormItem>\n        )}\n      />\n    );\n  };\n\n  const progress = ((currentStep + 1) / steps.length) * 100;\n\n  return (\n    <div className=\"pt-4 space-y-4\">\n      <h1 className=\"text-2xl font-semibold\">{title}</h1>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span>{t('step')} {currentStep + 1} / {steps.length}</span>\n          <span>{Math.round(progress)}%</span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-xl font-medium\">{currentStepData.title}</h2>\n            {currentStepData.description && (\n              <p className=\"text-muted-foreground mt-1\">\n                {currentStepData.description}\n              </p>\n            )}\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleStepSubmit)} className=\"space-y-4\">\n              {currentStepData.fields.map((field) => renderFormField(field))}\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex justify-between\">\n        <div>\n          {currentStep > 0 && (\n            <Button\n              variant=\"outline\"\n              onClick={onPreviousStep}\n              type=\"button\"\n            >\n              {t('prevstep')}\n            </Button>\n          )}\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onCancel}\n            type=\"button\"\n          >\n            {t('cancel')}\n          </Button>\n          <Button\n            onClick={form.handleSubmit(handleStepSubmit)}\n            disabled={loading}\n          >\n            {loading ? (\n              <div className=\"flex items-center\">\n                <div className=\"w-4 h-4 mr-2 border-t-2 border-b-2 border-current rounded-full animate-spin\" />\n                {t('creating')}\n              </div>\n            ) : currentStep === steps.length - 1 ? (\n              t('create')\n            ) : (\n              t('nextstep')\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiStepResourceCreate;",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-create-multiple/yaml-editor.tsx",
      "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport * as YAML from 'yaml';\nimport { AlertCircle } from 'lucide-react';\n\ninterface YamlEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n  showSample?: boolean;\n}\n\nfunction validateYaml(content: string): { isValid: boolean; error?: string } {\n  if (!content.trim()) {\n    return { isValid: true };\n  }\n\n  try {\n    YAML.parse(content);\n    return { isValid: true };\n  } catch (error) {\n    return { \n      isValid: false, \n      error: error instanceof Error ? error.message : 'Invalid YAML format' \n    };\n  }\n}\n\nexport const YamlEditor = ({\n  value,\n  onChange,\n  placeholder,\n  disabled = false,\n  className = '',\n  showSample = true,\n}: YamlEditorProps) => {\n  const [yamlValue, setYamlValue] = useState(value || '');\n  const [validation, setValidation] = useState({ isValid: true, error: '' });\n  const [isDirty, setIsDirty] = useState(false);\n\n  // Validate YAML content when it changes\n  useEffect(() => {\n    if (isDirty) {\n      const result = validateYaml(yamlValue);\n      setValidation({ \n        isValid: result.isValid, \n        error: result.error || '' \n      });\n    }\n  }, [yamlValue, isDirty]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newValue = e.target.value;\n    setYamlValue(newValue);\n    if (!isDirty) setIsDirty(true);\n    onChange(newValue);\n  };\n\n  const sampleYaml = `#cloud-config\nhostname: example\nusers:\n  - name: admin\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    ssh_authorized_keys:\n      - ssh-rsa AAAA...`;\n\n  return (\n    <div className=\"space-y-2\">\n      <textarea\n        value={yamlValue}\n        onChange={handleChange}\n        placeholder={placeholder}\n        disabled={disabled}\n        className={`flex w-full min-h-[200px] rounded-md border border-input font-mono px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${\n          !validation.isValid && isDirty ? 'border-destructive' : ''\n        } ${className}`}\n        onBlur={() => setIsDirty(true)}\n        aria-invalid={!validation.isValid}\n      />\n\n      {!validation.isValid && isDirty && (\n        <div className=\"flex items-start space-x-2 text-destructive text-sm\">\n          <AlertCircle className=\"h-4 w-4 mt-0.5\" />\n          <span>{validation.error}</span>\n        </div>\n      )}\n      \n      {showSample && (\n        <div className=\"text-xs text-muted-foreground mt-1\">\n          <code>YAML</code> format is required for Cloud-Init. Example:\n          <pre className=\"mt-1 p-2 bg-muted rounded text-xs overflow-auto\">\n            {sampleYaml}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n};",
      "type": "registry:component"
    }
  ]
}