{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resource-detail",
  "type": "registry:component",
  "title": "Resource Detail",
  "description": "A resource detail component.",
  "dependencies": [
    "next-intl",
    "swr",
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "sonner",
    "button",
    "dropdown-menu",
    "separator",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/resource-view.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/delete-confirmation.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/resource-detail/resource-detail.tsx",
      "content": "'use client'\n\nimport { ResourceView } from \"@/registry/new-york/blocks/resource-view/resource-view\"\nimport { DeleteConfirmationDialog } from \"@/registry/new-york/blocks/delete-confirmation/delete-confirmation\"\nimport { useEffect, useState, useMemo } from \"react\"\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { KeyedMutator } from \"swr\"\nimport { useRouter } from \"next/navigation\"\nimport { toast } from \"sonner\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\"\nimport { ChevronDown, TrashIcon } from \"lucide-react\"\nimport { Separator } from \"@/registry/new-york/ui/separator\"\nimport { useTranslations } from 'next-intl'\n\nexport interface ResourceDetailItemProps {\n  label: string\n  value: React.ReactNode\n}\n\nexport function ResourceDetailItem({ label, value }: ResourceDetailItemProps) {\n  return (\n    <div className=\"py-3\">\n      <dt className=\"text-sm font-medium text-muted-foreground\">{label}</dt>\n      <dd className=\"mt-1 text-sm text-foreground\">{value}</dd>\n      <Separator className=\"mt-3\" />\n    </div>\n  )\n}\n\ninterface Action<T> {\n  label: string\n  handler: (resource: T) => void\n  isDisabled?: (resource: T) => boolean\n}\n\nexport type ResourceDetailProps<T extends { name: string }, R extends object> = {\n  resourceType: string\n  resourceId: string\n  apiUrl: string\n  customActions?: Action<T>[]\n  editPath?: string\n  deleteUrl?: string\n  onDelete?: {\n    path: string\n    callback?: () => void\n  }\n  renderDetails: (data: T) => React.ReactNode\n  disableDefaultActions?: boolean\n  checkDependencies?: (resource: T) => Promise<{ hasDependencies: boolean; message?: string }>\n  relatedResource?: {\n    title: string\n    columns: ColumnDef<R>[]\n    apiUrl: string\n    deleteUrl: (name: string) => string\n    createPath?: string\n    editPath?: (name: string) => string\n    actions?: Array<{\n      label: string\n      handler: (selectedRows: R[]) => void\n      isDisabled?: (selectedRows: R[]) => boolean\n    }>\n    checkDependencies?: (resource: R) => Promise<{ hasDependencies: boolean; message?: string }>\n    customActions?: Array<{\n      label: string\n      handler: (selectedRows: R[]) => void\n      isDisabled?: (selectedRows: R[]) => boolean\n    }>\n    filterData?: (data: R[], parentData: T) => R[]\n    disableDefaultActions?: boolean\n  }\n}\n\nexport function ResourceDetail<T extends { name: string }, R extends { name: string }>({\n  resourceType,\n  apiUrl,\n  editPath,\n  deleteUrl,\n  onDelete,\n  renderDetails,\n  customActions = [],\n  disableDefaultActions = false,\n  checkDependencies,\n  relatedResource,\n}: ResourceDetailProps<T, R>) {\n  const router = useRouter()\n  const [data, setData] = useState<T | null>(null)\n  const [relatedData, setRelatedData] = useState<R[] | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isLoadingRelated, setIsLoadingRelated] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [relatedError, setRelatedError] = useState<Error | null>(null)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)\n  const [selectedResources, setSelectedResources] = useState<{ name: string }[]>([])\n  const [deleteTarget, setDeleteTarget] = useState<'main' | 'related'>('main')\n  const [dependencyCheck, setDependencyCheck] = useState<{ hasDependencies: boolean; message?: string } | null>(null)\n  const t = useTranslations('components.resource-detail')\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(apiUrl)\n        if (!response.ok) {\n          throw new Error(`Failed to fetch ${resourceType}`)\n        }\n        const jsonData = await response.json()\n        setData(jsonData)\n\n        if (relatedResource) {\n          setIsLoadingRelated(true)\n          const relatedResponse = await fetch(relatedResource.apiUrl)\n          if (!relatedResponse.ok) {\n            throw new Error(`Failed to fetch related resources`)\n          }\n          const relatedJsonData = await relatedResponse.json()\n\n          const filteredData = relatedResource.filterData\n            ? relatedResource.filterData(relatedJsonData, jsonData)\n            : relatedJsonData\n\n          setRelatedData(filteredData)\n        }\n      } catch (err) {\n        if (err instanceof Error) {\n          setError(err.message)\n        } else {\n          setError(\"An error occurred\")\n        }\n      } finally {\n        setIsLoading(false)\n        setIsLoadingRelated(false)\n      }\n    }\n\n    fetchData()\n  }, [apiUrl, resourceType, relatedResource])\n\n  useEffect(() => {\n    const checkResourceDependencies = async () => {\n      if (!data || !checkDependencies) return\n\n      try {\n        const check = await checkDependencies(data)\n        setDependencyCheck(check)\n      } catch (error) {\n        console.error('Error checking dependencies:', error)\n        toast.error(t('error'), {\n          description: t('dependencyerror'),\n          duration: 5000,\n        })\n      }\n    }\n\n    checkResourceDependencies()\n  }, [data, checkDependencies])\n\n  const handleEdit = editPath ? () => {\n    if (data?.name) {\n      router.push(editPath)\n    }\n  } : undefined\n\n  const handleDeleteClick = async () => {\n    if (!data || !deleteUrl) return\n\n    if (checkDependencies && dependencyCheck?.hasDependencies) {\n      toast.error(t('error'), {\n        description: dependencyCheck.message || t('deleteerror'),\n        duration: 5000,\n      })\n      return\n    }\n\n    setSelectedResources([data])\n    setDeleteTarget('main')\n    setIsDeleteDialogOpen(true)\n  }\n\n  const handleDelete = async () => {\n    if (!deleteUrl || isDeleting || !data) return\n\n    setIsDeleting(true)\n    try {\n      const response = await fetch(deleteUrl, {\n        method: \"DELETE\",\n      })\n      if (!response.ok) throw new Error(`Failed to delete ${resourceType}`)\n\n      if (onDelete) {\n        onDelete.callback?.()\n        router.push(onDelete.path)\n      }\n\n      toast.success(t('deletesuccess'), {\n        description: t('deleted1', { resourceType }),\n        duration: 3000,\n      })\n    } catch (error) {\n      toast.error(t('error'), {\n        description: t('deletefailed1', { resourceType }),\n        duration: 5000,\n      })\n    } finally {\n      setIsDeleting(false)\n      setIsDeleteDialogOpen(false)\n    }\n  }\n\n  const mutateRelatedData: KeyedMutator<R[]> = async () => {\n    if (!relatedResource || !data) return []\n\n    try {\n      setIsLoadingRelated(true)\n      const response = await fetch(relatedResource.apiUrl)\n      if (!response.ok) throw new Error(\"Failed to refresh related data\")\n      const newData = await response.json()\n\n      const filteredData = relatedResource.filterData\n        ? relatedResource.filterData(newData, data)\n        : newData\n\n      setRelatedData(filteredData)\n      return filteredData\n    } catch (err) {\n      setRelatedError(err instanceof Error ? err : new Error(\"Failed to refresh\"))\n      throw err\n    } finally {\n      setIsLoadingRelated(false)\n    }\n  }\n\n  const handleRelatedDelete = async (resources: R[]) => {\n    if (!relatedResource) return\n\n    setIsDeleting(true)\n    try {\n      await Promise.all(\n        resources.map((resource) =>\n          fetch(relatedResource.deleteUrl(resource.name), {\n            method: \"DELETE\",\n          })\n        )\n      )\n      await mutateRelatedData()\n      toast.success(t('deletesuccess'), {\n        description: t('deleted2'),\n        duration: 3000,\n      })\n    } catch (error) {\n      console.error(\"Failed to delete resources:\", error)\n      toast.error(t('error'), {\n        description: t('deletefailed2'),\n        duration: 5000,\n      })\n    } finally {\n      setIsDeleting(false)\n      setIsDeleteDialogOpen(false)\n    }\n  }\n\n  const getRelatedActions = () => {\n    if (!relatedResource) return []\n\n    if (relatedResource.disableDefaultActions) {\n      return relatedResource.customActions ?? []\n    }\n\n    const defaultActions = [\n      ...(relatedResource.editPath\n        ? [{\n          label: t('edit'),\n          handler: (selectedRows: R[]) => {\n            if (\n              selectedRows.length === 1 &&\n              selectedRows[0] !== undefined &&\n              relatedResource &&\n              relatedResource.editPath\n            ) {\n              router.push(relatedResource.editPath(selectedRows[0].name))\n            } else {\n              toast.error(t('error'), {\n                description: t('editerror'),\n                duration: 3000,\n              })\n            }\n          },\n          isDisabled: (selectedRows: R[]) => selectedRows.length !== 1\n        }]\n        : []),\n      {\n        label: t('delete'),\n        handler: async (selectedRows: R[]) => {\n          if (relatedResource.checkDependencies) {\n            const hasBlockingDependencies = await Promise.all(\n              selectedRows.map(async (resource) => {\n                const check = await relatedResource.checkDependencies!(resource)\n                if (check.hasDependencies) {\n                  toast.error(t('error'), {\n                    description: check.message || `${resource.name}: ${t('deleteerror')}`,\n                    duration: 5000,\n                  })\n                }\n                return check.hasDependencies\n              })\n            )\n\n            if (hasBlockingDependencies.some(Boolean)) {\n              return\n            }\n          }\n\n          setSelectedResources(selectedRows)\n          setDeleteTarget('related')\n          setIsDeleteDialogOpen(true)\n        },\n        isDisabled: (selectedRows: R[]) => selectedRows.length === 0\n      }\n    ]\n\n    return [...defaultActions, ...(relatedResource.customActions ?? [])]\n  }\n\n  const isDeleteDisabled = () => {\n    return !!dependencyCheck?.hasDependencies\n  }\n\n  const defaultActions: Action<T>[] = useMemo(() => [\n    ...(editPath ? [{\n      label: t('edit'),\n      handler: handleEdit!\n    }] : []),\n  ], [editPath, handleEdit])\n\n  const actions = disableDefaultActions ? customActions : [...defaultActions, ...customActions]\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 w-1/3 bg-muted animate-pulse rounded\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"h-16 bg-muted animate-pulse rounded-lg\" />\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold\">{t('error')}</h1>\n        <div className=\"text-destructive\">\n          <p>{error}</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!data) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold\">{t('notfound')}</h1>\n        <div>\n          <p className=\"text-muted-foreground\">{t('notfounddetail', { resourceType })}</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"pt-4 space-y-6\">\n      <div className=\"flex justify-between items-center sticky top-0 bg-background/95 backdrop-blur-sm z-10 py-2\">\n        <h1 className=\"text-2xl font-bold tracking-tight\">{data.name}</h1>\n        <div className=\"flex space-x-3\">\n          {!disableDefaultActions && (\n            <>\n              {actions.length > 0 && (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <ChevronDown className=\"mr-2 h-4 w-4\" />{t('action')}\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    {actions.map((action, index) => (\n                      <DropdownMenuItem\n                        key={index}\n                        onClick={() => action.handler(data)}\n                        disabled={action.isDisabled ? action.isDisabled(data) : false}\n                      >\n                        {action.label}\n                      </DropdownMenuItem>\n                    ))}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              )}\n              {deleteUrl && (\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  disabled={isDeleting || isDeleteDisabled()}\n                  onClick={handleDeleteClick}\n                >\n                  <TrashIcon className=\"h-4 w-4 mr-2\" />\n                  {t('delete')}\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      <dl className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-x-6 gap-y-1\">\n        {renderDetails(data)}\n      </dl>\n\n      {relatedResource && (\n        <div className=\"pt-4\">\n          <ResourceView\n            title={relatedResource.title}\n            columns={relatedResource.columns}\n            data={relatedData || []}\n            mutate={mutateRelatedData}\n            onCreate={relatedResource.createPath ? () => router.push(relatedResource.createPath!) : undefined}\n            actions={getRelatedActions()}\n            isLoading={isLoadingRelated}\n            error={relatedError || undefined}\n          />\n        </div>\n      )}\n\n      <DeleteConfirmationDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={() => setIsDeleteDialogOpen(false)}\n        onConfirm={() => {\n          if (deleteTarget === 'main') {\n            handleDelete()\n          } else {\n            handleRelatedDelete(selectedResources as R[])\n          }\n        }}\n        resourceNames={selectedResources.map(r => r.name)}\n      />\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/resource-detail/messages/en.json",
      "content": "{\n  \"components\": {\n    \"resource-detail\": {\n      \"error\": \"Error\",\n      \"dependencyerror\": \"An error occurred while checking dependencies\",\n      \"deleteerror\": \"Cannot delete due to existing dependent resources\",\n      \"deletesuccess\": \"Delete successful\",\n      \"deleted1\": \"Deleted {resourceType}\",\n      \"deletefailed1\": \"Failed to delete {resourceType}\",\n      \"deleted2\": \"Deleted selected resources\",\n      \"deletefailed2\": \"Failed to delete resources\",\n      \"edit\": \"Edit\",\n      \"editerror\": \"Please select one resource to edit\",\n      \"delete\": \"Delete\",\n      \"notfound\": \"Not Found\",\n      \"notfounddetail\": \"{resourceType} not found\",\n      \"action\": \"Action\"\n    }\n  }\n}",
      "type": "registry:file",
      "target": "messages/components/resource-detail/en.json"
    },
    {
      "path": "registry/new-york/blocks/resource-detail/messages/ja.json",
      "content": "{\n  \"components\": {\n    \"resource-detail\": {\n      \"error\": \"エラー\",\n      \"dependencyerror\": \"依存関係のチェック中にエラーが発生しました\",\n      \"deleteerror\": \"依存するリソースが存在するため削除できません\",\n      \"deletesuccess\": \"削除成功\",\n      \"deleted1\": \"{resourceType}を削除しました\",\n      \"deletefailed1\": \"{resourceType}の削除に失敗しました\",\n      \"deleted2\": \"選択したリソースを削除しました\",\n      \"deletefailed2\": \"リソースの削除に失敗しました\",\n      \"edit\": \"編集\",\n      \"editerror\": \"編集するには1つのリソースを選択してください\",\n      \"delete\": \"削除\",\n      \"notfound\": \"見つかりません\",\n      \"notfounddetail\": \"{resourceType}が見つかりませんでした\",\n      \"action\": \"アクション\"\n    }\n  }\n}",
      "type": "registry:file",
      "target": "messages/components/resource-detail/ja.json"
    }
  ]
}