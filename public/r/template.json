{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "template",
  "type": "registry:block",
  "title": "Template",
  "description": "A template component.",
  "dependencies": [
    "next-intl",
    "next-themes",
    "next-auth",
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/i18n.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/session-provider.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/theme-provider.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/header.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/sidenav.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/content.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/service-index.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/resource-dashboard.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/resource-detail.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/template/app/globals.css",
      "content": "@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-sidebar-ring: var(--sidebar-ring);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar: var(--sidebar);\n  --color-chart-5: var(--chart-5);\n  --color-chart-4: var(--chart-4);\n  --color-chart-3: var(--chart-3);\n  --color-chart-2: var(--chart-2);\n  --color-chart-1: var(--chart-1);\n  --color-ring: var(--ring);\n  --color-input: var(--input);\n  --color-border: var(--border);\n  --color-destructive: var(--destructive);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-accent: var(--accent);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-muted: var(--muted);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-secondary: var(--secondary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-primary: var(--primary);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-popover: var(--popover);\n  --color-card-foreground: var(--card-foreground);\n  --color-card: var(--card);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.141 0.005 285.823);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.141 0.005 285.823);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.141 0.005 285.823);\n  --primary: oklch(0.21 0.006 285.885);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.967 0.001 286.375);\n  --secondary-foreground: oklch(0.21 0.006 285.885);\n  --muted: oklch(0.967 0.001 286.375);\n  --muted-foreground: oklch(0.552 0.016 285.938);\n  --accent: oklch(0.967 0.001 286.375);\n  --accent-foreground: oklch(0.21 0.006 285.885);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.92 0.004 286.32);\n  --input: oklch(0.92 0.004 286.32);\n  --ring: oklch(0.705 0.015 286.067);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.141 0.005 285.823);\n  --sidebar-primary: oklch(0.21 0.006 285.885);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.967 0.001 286.375);\n  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);\n  --sidebar-border: oklch(0.92 0.004 286.32);\n  --sidebar-ring: oklch(0.705 0.015 286.067);\n}\n\n.dark {\n  --background: oklch(0.141 0.005 285.823);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.21 0.006 285.885);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.21 0.006 285.885);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.92 0.004 286.32);\n  --primary-foreground: oklch(0.21 0.006 285.885);\n  --secondary: oklch(0.274 0.006 286.033);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.274 0.006 286.033);\n  --muted-foreground: oklch(0.705 0.015 286.067);\n  --accent: oklch(0.274 0.006 286.033);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.552 0.016 285.938);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.21 0.006 285.885);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.274 0.006 286.033);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.552 0.016 285.938);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
      "type": "registry:file",
      "target": "app/globals.css"
    },
    {
      "path": "registry/new-york/blocks/template/next.config.ts",
      "content": "import { NextConfig } from 'next';\nimport createNextIntlPlugin from 'next-intl/plugin';\n \nconst nextConfig: NextConfig = {}; \nconst withNextIntl = createNextIntlPlugin();\n\nexport default withNextIntl(nextConfig);",
      "type": "registry:file",
      "target": "next.config.ts"
    },
    {
      "path": "registry/new-york/blocks/template/app/service/layout.tsx",
      "content": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"@/app/globals.css\";\nimport { NextIntlClientProvider } from 'next-intl';\nimport { getLocale } from 'next-intl/server';\nimport { NextAuthProvider } from \"@/registry/new-york/blocks/session-provider/session-provider\";\nimport { ThemeProvider } from \"@/registry/new-york/blocks/theme-provider/theme-provider\";\nimport { Header } from \"@/registry/new-york/blocks/header/header\";\nimport { Content } from \"@/registry/new-york/blocks/content/content\";\nimport SideNav from \"@/registry/new-york/blocks/sidenav/sidenav\";\nimport { SidebarInset, SidebarProvider } from \"@/registry/new-york/ui/sidebar\";\nimport { LayoutGrid } from \"lucide-react\";\n\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Service Name\",\n  description: \"Service Description\",\n};\n\nconst headerMenu = {\n  icon: LayoutGrid,\n  title: \"Service Name\",\n  subtitle: \"v1alpha1\",\n  href: \"/service\"\n}\n\nconst navItems = [\n  {\n    name: \"Resource Category\",\n    href: \"/service\",\n    items: [\n      { name: \"Home\", href: \"/service\" },\n      { name: \"Resource Type 1\", href: \"/service/resource1\" },\n      { name: \"Resource Type 2\", href: \"/service/resource2\" }\n    ]\n  }\n];\n\n\nexport default async function RootLayout({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  const locale = await getLocale();\n\n  return (\n    <html lang={locale} >\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <NextAuthProvider>\n          <NextIntlClientProvider>\n            <ThemeProvider\n              attribute=\"class\"\n              defaultTheme=\"system\"\n              enableSystem\n              disableTransitionOnChange\n            >\n              <SidebarProvider>\n                <SideNav headerMenu={headerMenu} navItems={navItems} />\n                <SidebarInset>\n                  <Header />\n                  <Content>\n                    <div className=\"flex\">\n                      <main className=\"flex-1\">\n                        {children}\n                      </main>\n                    </div>\n                  </Content>\n                </SidebarInset>\n              </SidebarProvider>\n            </ThemeProvider>\n          </NextIntlClientProvider>\n        </NextAuthProvider>\n      </body>\n    </html>\n  );\n}",
      "type": "registry:file",
      "target": "app/service/layout.tsx"
    },
    {
      "path": "registry/new-york/blocks/template/app/service/page.tsx",
      "content": "import React from 'react';\nimport { \n  CloudIcon, \n  MapPinIcon,\n} from 'lucide-react';\n\nimport ServiceIndex from '@/registry/new-york/blocks/service-index/service-index';\nimport { useTranslations } from 'next-intl';\n\nconst ServiceIndexTemplate: React.FC = () => {\n  const t = useTranslations('pages.index');\n\n  const resources = [\n    {\n      title: t('resources.item1.title'),\n      icon: CloudIcon,\n      description: t('resources.item1.description'),\n      link: '/service/resource1',\n      detail: t('resources.item1.detail')\n    },\n    {\n      title: t('resources.item2.title'),\n      icon: MapPinIcon,\n      description: t('resources.item2.description'),\n      link: '/service/resource2',\n      detail: t('resources.item2.detail')\n    },\n  ];\n\n  return (\n    <ServiceIndex\n      title={t('title')}\n      description={t('description')}\n      resources={resources}\n      primaryButtonText={t('primaryButton')}\n      secondaryButtonText={t('secondaryButton')}\n      primaryButtonLink=\"/service/resource1\"\n      secondaryButtonLink=\"#\"\n    />\n  );\n};\n\nexport default ServiceIndexTemplate;",
      "type": "registry:file",
      "target": "app/service/page.tsx"
    },
    {
      "path": "registry/new-york/blocks/template/app/service/resource1/columns.tsx",
      "content": "\"use client\"\n\nimport Link from \"@/registry/new-york/blocks/link/link\"\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { useTranslations } from 'next-intl'\n\nexport type Resource = {\n  id: number\n  name: string\n  username: string\n  email: string\n  phone: string\n  website: string\n  company: {\n    name: string\n    catchPhrase: string\n    bs: string\n  }\n  address: {\n    street: string\n    suite: string\n    city: string\n    zipcode: string\n    geo: {\n      lat: string\n      lng: string\n    }\n  }\n}\n\nconst StatusBadge = ({ website }: { website: string }) => {\n  const getStatusColor = (website: string) => {\n    if (website.endsWith('.com')) return 'bg-blue-500'\n    if (website.endsWith('.net')) return 'bg-purple-500'\n    if (website.endsWith('.org')) return 'bg-green-500'\n    if (website.endsWith('.info')) return 'bg-yellow-500'\n    return 'bg-gray-500'\n  }\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <div className={`w-2 h-2 rounded-full ${getStatusColor(website)}`} />\n      <span className=\"text-sm\">{website}</span>\n    </div>\n  )\n}\n\nexport const ResourceColumns = () => {\n  const t = useTranslations('pages.resource1.columns')\n\n  const columns: ColumnDef<Resource>[] = [\n    {\n      accessorKey: \"name\",\n      header: t('name'),\n      cell: ({row}) => (\n        <Link \n          href={`/resource/items/${row.getValue(\"id\")}`} \n          className=\"text-blue-500 hover:underline\"\n        >\n          {row.getValue(\"name\")}\n        </Link>\n      )\n    },\n    {\n      accessorKey: \"username\",\n      header: t('username'),\n    },\n    {\n      accessorKey: \"email\",\n      header: t('email'),\n      cell: ({ row }) => (\n        <a \n          href={`mailto:${row.getValue(\"email\")}`} \n          className=\"text-blue-500 hover:underline\"\n        >\n          {row.getValue(\"email\")}\n        </a>\n      ),\n    },\n    {\n      accessorKey: \"website\",\n      header: t('website'),\n      cell: ({ row }) => (\n        <StatusBadge website={row.getValue(\"website\")} />\n      ),\n    },\n    {\n      accessorKey: \"company.name\",\n      header: t('company'),\n      cell: ({ row }) => {\n        const company = row.original.company;\n        return (\n          <div className=\"flex flex-col\">\n            <span>{company.name}</span>\n            <span className=\"text-xs text-gray-500\">{company.catchPhrase}</span>\n          </div>\n        );\n      },\n    },\n    {\n      accessorKey: \"address.city\",\n      header: t('city'),\n      cell: ({ row }) => {\n        const address = row.original.address;\n        return `${address.city}, ${address.zipcode}`;\n      },\n    },\n  ]\n\n  return columns\n}\n\nexport default ResourceColumns",
      "type": "registry:file",
      "target": "app/service/resource1/columns.tsx"
    },
    {
      "path": "registry/new-york/blocks/template/app/service/resource1/page.tsx",
      "content": "'use client'\n\nimport ResourceDashboard from '@/registry/new-york/blocks/resource-dashboard/resource-dashboard'\nimport { ResourceColumns, Resource } from './columns'\nimport { useTranslations } from 'next-intl'\n\nexport default function ResourcePage() {\n  const columns = ResourceColumns()\n  const t = useTranslations('pages.resource1.dashboard')\n\n  const checkDependencies = (resource: Resource) => {\n    const companyName = resource.company.name || '';\n    const hasDependency = companyName.includes('Group') || companyName.includes('LLC');\n    \n    return Promise.resolve({\n      hasDependencies: hasDependency,\n      message: hasDependency \n        ? t('deletionError', { name: resource.name, company: companyName })\n        : undefined\n    })\n  }\n\n  return (\n    <ResourceDashboard<Resource>\n      resourceType={t('resourcetype')}\n      columns={columns}\n      apiUrl=\"https://jsonplaceholder.typicode.com/users\"\n      deleteUrl={(id: string) => `/resource/items/delete/${id}`}\n      createPath=\"/resource/items/create\"\n      editPath={(id: string) => `/resource/items/edit/${id}`}\n      checkDependencies={checkDependencies}\n    />\n  )\n}",
      "type": "registry:file",
      "target": "app/service/resource1/page.tsx"
    },
    {
      "path": "registry/new-york/blocks/template/app/service/resource1/[name]/page.tsx",
      "content": "\"use client\"\n\nimport { ResourceDetail, ResourceDetailItem } from \"@/registry/new-york/blocks/resource-detail/resource-detail\"\nimport { Resource } from \"../columns\"\nimport { use } from \"react\"\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport Link from \"@/registry/new-york/blocks/link/link\"\nimport { useTranslations } from 'next-intl'\n\ninterface Post {\n  userId: number\n  id: number\n  title: string\n  body: string\n  name: string\n}\n\nconst PostColumns = () => {\n  const t = useTranslations('pages.resource1.detail')\n\n  const postColumns: ColumnDef<Post>[] = [\n    {\n      accessorKey: \"id\",\n      header: t('postcolumns.id', { defaultMessage: 'ID' }),\n    },\n    {\n      accessorKey: \"title\",\n      header: t('postcolumns.title', { defaultMessage: 'タイトル' }),\n      cell: ({ row }) => (\n        <Link\n          href={`https://jsonplaceholder.typicode.com/posts/${row.getValue(\"id\")}`}\n          className=\"text-blue-500 hover:underline\"\n          target=\"_blank\"\n        >\n          {row.getValue(\"title\")}\n        </Link>\n      ),\n    },\n    {\n      accessorKey: \"body\",\n      header: t('postcolumns.body', { defaultMessage: '内容' }),\n      cell: ({ row }) => {\n        const body = row.getValue(\"body\") as string;\n        return body.length > 50 ? `${body.substring(0, 50)}...` : body;\n      }\n    },\n  ]\n  return postColumns\n}\n\nexport default function UserDetailPage(\n  props: {\n    params: Promise<{ name: string }>\n  }\n) {\n  const params = use(props.params)\n  const postColumns = PostColumns()\n  const t = useTranslations('pages.resource1.detail')\n\n  const renderUserDetails = (user: Resource) => (\n    <>\n      <ResourceDetailItem label={t('name', { defaultMessage: '名前' })} value={user.name} />\n      <ResourceDetailItem label={t('username', { defaultMessage: 'ユーザー名' })} value={user.username} />\n      <ResourceDetailItem \n        label={t('email', { defaultMessage: 'メールアドレス' })} \n        value={\n          <a href={`mailto:${user.email}`} className=\"text-blue-500 hover:underline\">\n            {user.email}\n          </a>\n        } \n      />\n      <ResourceDetailItem label={t('phone', { defaultMessage: '電話番号' })} value={user.phone} />\n      <ResourceDetailItem \n        label={t('website', { defaultMessage: 'ウェブサイト' })} \n        value={\n          <a href={`https://${user.website}`} target=\"_blank\" className=\"text-blue-500 hover:underline\">\n            {user.website}\n          </a>\n        } \n      />\n      <ResourceDetailItem \n        label={t('company', { defaultMessage: '会社' })} \n        value={\n          <div className=\"flex flex-col\">\n            <span>{user.company.name}</span>\n            <span className=\"text-xs text-gray-500\">{user.company.catchPhrase}</span>\n            <span className=\"text-xs text-gray-400\">{user.company.bs}</span>\n          </div>\n        } \n      />\n      <ResourceDetailItem \n        label={t('address', { defaultMessage: '住所' })} \n        value={\n          <div className=\"flex flex-col\">\n            <span>{user.address.street}, {user.address.suite}</span>\n            <span>{user.address.city}, {user.address.zipcode}</span>\n            <span className=\"text-xs text-gray-500\">\n              {t('geo', { defaultMessage: '座標' })}: {user.address.geo.lat}, {user.address.geo.lng}\n            </span>\n          </div>\n        } \n      />\n    </>\n  )\n\n  return (\n    <ResourceDetail<Resource, Post>\n      resourceType={t('resourcetype', { defaultMessage: 'ユーザー' })}\n      resourceId={params.name}\n      apiUrl={`https://jsonplaceholder.typicode.com/users/${params.name}`}\n      editPath={`/resource/items/edit/${params.name}`}\n      deleteUrl={`/resource/items/delete/${params.name}`}\n      onDelete={{\n        path: \"/service/resource1\",\n      }}\n      checkDependencies={(user) => Promise.resolve({\n        hasDependencies: user.company.name.includes('Group') || user.company.name.includes('LLC'),\n        message: (user.company.name.includes('Group') || user.company.name.includes('LLC'))\n          ? t('deletionError', { \n              defaultMessage: `ユーザー {name} は {company} に関連付けられているため、削除できません。`,\n              name: user.name,\n              company: user.company.name\n            })\n          : undefined\n      })}\n      renderDetails={renderUserDetails}\n      relatedResource={{\n        title: t('relatedtitle', { defaultMessage: '投稿一覧' }),\n        columns: postColumns,\n        apiUrl: `https://jsonplaceholder.typicode.com/posts`,\n        deleteUrl: (id) => `/api/posts/${id}`,\n        createPath: `/resource/posts/create`,\n        editPath: (id) => `/resource/posts/edit/${id}`,\n        filterData: (posts, user) => {\n          return posts\n            .filter(post => post.userId === user.id)\n            .map(post => ({\n              ...post,\n              name: String(post.id)\n            }));\n        },\n      }}\n    />\n  )\n}",
      "type": "registry:file",
      "target": "app/service/resource1/[name]/page.tsx"
    },
    {
      "path": "registry/new-york/blocks/template/app/messages/pages/index/en.json",
      "content": "{\n  \"pages\": {\n    \"index\": {\n      \"title\": \"Service Title\",\n      \"description\": \"Description of your service and its purpose in your application.\",\n      \"primaryButton\": \"Get Started\",\n      \"secondaryButton\": \"Learn More\",\n      \"resources\": {\n        \"item1\": {\n          \"title\": \"Resource Type 1\",\n          \"description\": \"Description of the first resource type\",\n          \"detail\": \"Learn More\"\n        },\n        \"item2\": {\n          \"title\": \"Resource Type 2\",\n          \"description\": \"Description of the second resource type\",\n          \"detail\": \"Learn More\"\n        }\n      }\n    }\n  }\n}",
      "type": "registry:file",
      "target": "messages/pages/index/en.json"
    },
    {
      "path": "registry/new-york/blocks/template/app/messages/pages/index/ja.json",
      "content": "{\n  \"pages\": {\n    \"index\": {\n      \"title\": \"サービス タイトル\",\n      \"description\": \"アプリケーションにおけるサービスとその目的の説明。\",\n      \"primaryButton\": \"今すぐ始める\",\n      \"secondaryButton\": \"詳細を見る\",\n      \"resources\": {\n        \"item1\": {\n          \"title\": \"リソースタイプ 1\",\n          \"description\": \"最初のリソースタイプの説明\",\n          \"detail\": \"詳細を表示\"\n        },\n        \"item2\": {\n          \"title\": \"リソースタイプ 2\",\n          \"description\": \"2番目のリソースタイプの説明\",\n          \"detail\": \"詳細を表示\"\n        }\n      }\n    }\n  }\n}",
      "type": "registry:file",
      "target": "messages/pages/index/ja.json"
    },
    {
      "path": "registry/new-york/blocks/template/app/messages/pages/resource1/dashboard/en.json",
      "content": "{\n  \"pages\": {\n    \"resource1\": {\n      \"dashboard\": {\n        \"resourcetype\": \"Users\",\n        \"deletionError\": \"User {name} is associated with {company} and cannot be deleted.\"\n      },\n      \"columns\": {\n        \"name\": \"Name\",\n        \"username\": \"Username\",\n        \"email\": \"Email\",\n        \"website\": \"Website\",\n        \"company\": \"Company\",\n        \"city\": \"City\"\n      }\n    }\n  }\n}",
      "type": "registry:file",
      "target": "messages/pages/resource1/dashboard/en.json"
    },
    {
      "path": "registry/new-york/blocks/template/app/messages/pages/resource1/dashboard/ja.json",
      "content": "{\n  \"pages\": {\n    \"resource1\": {\n      \"dashboard\": {\n        \"resourcetype\": \"ユーザー\",\n        \"deletionError\": \"ユーザー {name} は {company} に関連付けられているため、削除できません。\"\n      },\n      \"columns\": {\n        \"name\": \"名前\",\n        \"username\": \"ユーザー名\",\n        \"email\": \"メールアドレス\",\n        \"website\": \"ウェブサイト\",\n        \"company\": \"会社名\",\n        \"city\": \"都市\"\n      }\n    }\n  }\n}",
      "type": "registry:file",
      "target": "messages/pages/resource1/dashboard/ja.json"
    },
    {
      "path": "registry/new-york/blocks/template/app/messages/pages/resource1/detail/en.json",
      "content": "{\n  \"pages\": {\n    \"resource1\": {\n      \"detail\": {\n        \"resourcetype\": \"User Details\",\n        \"name\": \"Name\",\n        \"username\": \"Username\",\n        \"email\": \"Email\",\n        \"phone\": \"Phone\",\n        \"website\": \"Website\",\n        \"company\": \"Company\",\n        \"address\": \"Address\",\n        \"geo\": \"Coordinates\",\n        \"relatedtitle\": \"User's Posts\",\n        \"deletionError\": \"User {name} is associated with {company} and cannot be deleted.\",\n        \"postcolumns\": {\n          \"id\": \"ID\",\n          \"title\": \"Title\",\n          \"body\": \"Content\"\n        }\n      }\n    }\n  }\n} ",
      "type": "registry:file",
      "target": "messages/pages/resource1/[name]/en.json"
    },
    {
      "path": "registry/new-york/blocks/template/app/messages/pages/resource1/detail/ja.json",
      "content": "{\n  \"pages\": {\n    \"resource1\": {\n      \"detail\": {\n        \"resourcetype\": \"ユーザー詳細\",\n        \"name\": \"名前\",\n        \"username\": \"ユーザー名\",\n        \"email\": \"メールアドレス\",\n        \"phone\": \"電話番号\",\n        \"website\": \"ウェブサイト\",\n        \"company\": \"会社\",\n        \"address\": \"住所\",\n        \"geo\": \"座標\",\n        \"relatedtitle\": \"ユーザーの投稿\",\n        \"deletionError\": \"ユーザー {name} は {company} に関連付けられているため、削除できません。\",\n        \"postcolumns\": {\n          \"id\": \"ID\",\n          \"title\": \"タイトル\",\n          \"body\": \"内容\"\n        }\n      }\n    }\n  }\n} ",
      "type": "registry:file",
      "target": "messages/pages/resource1/[name]/ja.json"
    }
  ]
}