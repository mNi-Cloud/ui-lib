{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header",
  "type": "registry:component",
  "title": "Header",
  "description": "A responsive application header with theme toggle, user dropdown and mobile menu.",
  "dependencies": [
    "next-themes",
    "next-intl",
    "next-auth"
  ],
  "registryDependencies": [
    "button",
    "avatar",
    "dropdown-menu",
    "sheet",
    "separator",
    "sidebar",
    "command",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/link.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/i18n.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/header/header.tsx",
      "content": "'use client'\n\nimport { startTransition } from 'react'\nimport { useTheme } from 'next-themes'\nimport { useTranslations } from 'next-intl'\nimport { setUserLocale } from '@/registry/new-york/blocks/i18n/locale'\nimport { locales, Locale } from '@/registry/new-york/blocks/i18n/config'\nimport { signOut, useSession, signIn } from 'next-auth/react'\nimport {\n  Bell,\n  Settings,\n  GlobeIcon,\n  JapaneseYen,\n  Menu,\n  Moon,\n  Sun,\n  Laptop,\n  LogOut,\n  UserPen,\n} from 'lucide-react'\nimport { Button } from '@/registry/new-york/ui/button'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/new-york/ui/avatar'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuPortal,\n} from '@/registry/new-york/ui/dropdown-menu'\nimport { Sheet, SheetContent, SheetTrigger } from '@/registry/new-york/ui/sheet'\nimport { SearchService } from './header-search'\nimport { SidebarTrigger } from '@/registry/new-york/ui/sidebar'\nimport { Separator } from '@/registry/new-york/ui/separator'\nimport Link from '@/registry/new-york/blocks/link/link'\n\nexport function Header() {\n  const t = useTranslations('component.header')\n  const { data: session } = useSession()\n\n  return (\n    <header className=\"sticky top-0 z-20 w-full bg-background border-b\">\n      <div className=\"w-full px-3\">\n        <div className=\"flex justify-between items-center py-2\">\n          <div className=\"flex items-center gap-2\">\n            <SidebarTrigger />\n            <Separator orientation=\"vertical\" className=\"h-3\" />\n            <Link href=\"/dashboard\" className=\"text-xl font-bold\">\n              mNi\n            </Link>\n          </div>\n          <div className=\"flex flex-1 items-center justify-end\">\n            <nav className=\"flex items-center space-x-2\">\n              <SearchService />\n              <div className=\"hidden md:flex items-center space-x-2\">\n                <Button size=\"sm\" variant=\"ghost\">\n                  <Bell className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">{t('notifications')}</span>\n                </Button>\n                <ThemeToggle />\n                {session ? (\n                  <UserDropdown />\n                ) : (\n                  <Button size=\"sm\" onClick={() => signIn()}>{t('login')}</Button>\n                )}\n              </div>\n              <div className=\"flex md:hidden\">\n                <MobileMenu />\n              </div>\n            </nav>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme()\n  const t = useTranslations('component.header')\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\">\n          <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">{\"toggle theme\"}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>{t('light')}</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>{t('dark')}</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          <Laptop className=\"mr-2 h-4 w-4\" />\n          <span>{t('system')}</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\nfunction UserDropdown() {\n  const t = useTranslations('component.header')\n  const { data: session } = useSession()\n  const userName = session?.user?.name || 'User'\n  const userImage = session?.user?.image\n  const userEmail = session?.user?.email\n  const initials = userName.split(' ').map(name => name[0]).join('').toUpperCase()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-7 w-7 rounded-full\">\n          <Avatar className=\"h-7 w-7\">\n            {userImage ? (\n              <AvatarImage src={userImage} alt={userName} />\n            ) : null}\n            <AvatarFallback>{initials}</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">{userName}</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">{userEmail}</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          <UserPen className=\"mr-2 h-4 w-4\" />\n          <span>{t('profile')}</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Link href=\"/bap\" className=\"flex items-center\">\n            <JapaneseYen className=\"mr-2 h-5 w-5\" />\n            <span>{t('billing')}</span>\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem>\n          <Settings className=\"mr-2 h-4 w-4\" />\n          <span>{t('settings')}</span>\n        </DropdownMenuItem>\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>\n            <GlobeIcon className=\"mr-4 h-4 w-4\" />\n            <span>{t('language')}</span>\n          </DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent>\n              <LanguageToggle />\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={() => signOut()}>\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          <span>{t('logout')}</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\nfunction LanguageToggle() {\n  const languageNames: Record<Locale, string> = {\n    'ja': '日本語',\n    'en': 'English',\n  }\n\n  function onChange(locale: Locale) {\n    startTransition(() => {\n      setUserLocale(locale)\n    })\n  }\n\n  return (\n    <>\n      {locales.map((locale) => (\n        <DropdownMenuItem \n          key={locale} \n          onClick={() => onChange(locale)}\n        >\n          <span>{languageNames[locale]}</span>\n        </DropdownMenuItem>\n      ))}\n    </>\n  )\n}\n\nfunction MobileMenu() {\n  const t = useTranslations('component.header')\n  const { setTheme } = useTheme()\n  const { data: session } = useSession()\n\n  return (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n          <Menu className=\"h-5 w-5\" />\n          <span className=\"sr-only\">{t('openMenu')}</span>\n        </Button>\n      </SheetTrigger>\n      <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n        <div className=\"flex flex-col h-full\">\n          <div className=\"flex-1\">\n            <h2 className=\"text-lg font-semibold mb-4\">{t('menu')}</h2>\n            <nav className=\"space-y-4\">\n              <Button variant=\"ghost\" className=\"w-full justify-start\">\n                <Bell className=\"mr-2 h-5 w-5\" />\n                {t('notifications')}\n              </Button>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\">\n                    <Sun className=\"mr-2 h-5 w-5\" />\n                    {t('theme')}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                  <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n                    <Sun className=\"mr-2 h-4 w-4\" />\n                    <span>{t('light')}</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n                    <Moon className=\"mr-2 h-4 w-4\" />\n                    <span>{t('dark')}</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n                    <Laptop className=\"mr-2 h-4 w-4\" />\n                    <span>{t('system')}</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n              {session ? (\n                <>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\">\n                    <UserPen className=\"mr-2 h-5 w-5\" />\n                    {t('profile')}\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                    <Link href=\"/bap\" className=\"flex items-center\">\n                      <JapaneseYen className=\"mr-2 h-5 w-5\" />\n                      <span>{t('billing')}</span>\n                    </Link>\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\">\n                    <Settings className=\"mr-2 h-5 w-5\" />\n                    {t('settings')}\n                  </Button>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\">\n                        <GlobeIcon className=\"mr-2 h-5 w-5\" />\n                        {t('language')}\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                      <LanguageToggle />\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\" onClick={() => signOut()}>\n                    <LogOut className=\"mr-2 h-5 w-5\" />\n                    {t('logout')}\n                  </Button>\n                </>\n              ) : (\n                <Button className=\"w-full\" onClick={() => signIn()}>{t('login')}</Button>\n              )}\n            </nav>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/header/header-search.tsx",
      "content": "'use client'\n\nimport React, { useMemo } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/registry/new-york/ui/button'\nimport {\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/registry/new-york/ui/command'\nimport { Search } from 'lucide-react'\nimport { useTranslations } from 'next-intl'\n\ninterface SearchItem {\n  value: string\n  label: string | React.ReactNode\n  category: string\n  description: string\n  path: string\n  keywords: string[]\n}\n\ninterface GroupedData {\n  [key: string]: SearchItem[]\n}\n\nexport function SearchService() {\n  const [open, setOpen] = React.useState(false)\n  const router = useRouter()\n  const t = useTranslations('component.header-search')\n\n  const searchData = useMemo<SearchItem[]>(\n    () => [\n      {\n        value: 'mNi Dashboard',\n        label: 'mNi Dashboard',\n        category: 'Management',\n        description: 'Cloud Dashboard',\n        path: '/dashboard',\n        keywords: ['dashboard', 'console', 'management'],\n      },\n      {\n        value: 'mNi VPC',\n        label: 'mNi VPC',\n        category: 'Networking',\n        description: 'Secure and isolate cloud resources',\n        path: '/vpc',\n        keywords: [\n          'vpc',\n          'network',\n          'virtual private cloud',\n          'networking',\n          'eip',\n          'subnet',\n          'security group',\n          'security',\n          'sg',\n        ],\n      },\n      {\n        value: 'mNi Block Storage',\n        label: 'mNi Block Storage',\n        category: 'Storage',\n        description: 'Scalable cloud storage services',\n        path: '/bs',\n        keywords: [\n          'storage',\n          'data',\n          'cloud storage',\n          'file system',\n          'block',\n          'block storage',\n          'bs',\n        ],\n      },\n      {\n        value: 'mNi VM',\n        label: 'mNi VM',\n        category: 'Computing',\n        description: 'Scalable computing capacity',\n        path: '/vm',\n        keywords: [\n          'compute',\n          'processing',\n          'cloud computing',\n          'virtual machines',\n          'vm',\n        ],\n      },\n      {\n        value: 'mNi Container',\n        label: 'mNi Container',\n        category: 'Computing',\n        description: 'Managed database services',\n        path: '/ctr',\n        keywords: ['compute', 'processing', 'cloud computing', 'container', 'ctr'],\n      },\n    ],\n    []\n  )\n\n  const groupedData = useMemo<GroupedData>(() => {\n    return searchData.reduce<GroupedData>(\n      (groups, item) => {\n        const category = item.category\n        if (!groups[category]) {\n          groups[category] = []\n        }\n        groups[category].push(item)\n        return groups\n      },\n      {}\n    )\n  }, [searchData])\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener('keydown', down)\n    return () => document.removeEventListener('keydown', down)\n  }, [])\n\n  const handleSelect = useMemo(\n    () => (path: string) => {\n      router.push(path)\n      setOpen(false)\n    },\n    [router]\n  )\n\n  return (\n    <>\n      <div className=\"hidden md:block\">\n        <Button\n          variant=\"outline\"\n          className=\"h-7 px-3 min-w-[140px] text-sm text-[13px] text-muted-foreground hover:text-foreground [font-feature-settings:'kern'] antialiased\"\n          onClick={() => setOpen(true)}\n        >\n          <Search className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n          <span className=\"translate-y-0\">Search</span>\n          <kbd className=\"ml-2 pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-80 translate-y-0\">\n            <span className=\"text-xs translate-y-0\">⌘</span>K\n          </kbd>\n        </Button>\n      </div>\n      <div className=\"md:hidden\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"text-muted-foreground hover:text-foreground\"\n          onClick={() => setOpen(true)}\n        >\n          <Search className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Search</span>\n        </Button>\n      </div>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder={t('placeholder')} className=\"text-base\" />\n        <CommandList>\n          <CommandEmpty className=\"text-sm py-6\">\n            {t('noresults')}\n          </CommandEmpty>\n          {Object.entries(groupedData).map(([category, items]) => (\n            <CommandGroup\n              key={category}\n              heading={category}\n              className=\"text-sm font-medium [font-feature-settings:'kern']\"\n            >\n              {items.map((item) => (\n                <CommandItem\n                  key={item.value}\n                  onSelect={() => handleSelect(item.path)}\n                  className=\"py-3\"\n                >\n                  <div className=\"flex flex-col gap-1\">\n                    <span className=\"font-medium text-sm translate-y-0 [font-feature-settings:'kern']\">\n                      {item.label}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground translate-y-0\">\n                      {item.description}\n                    </span>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          ))}\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/header/messages/en.json",
      "content": "{\n  \"component\": {\n    \"header-search\": {\n      \"placeholder\": \"Search...\",\n      \"noresults\": \"No results found\"\n    },\n    \"header\": {\n      \"notifications\": \"Notifications\",\n      \"login\": \"Login\",\n      \"profile\": \"Profile\",\n      \"billing\": \"Billing\",\n      \"settings\": \"Settings\",\n      \"language\": \"Language\",\n      \"theme\": \"Theme\",\n      \"logout\": \"Logout\",\n      \"light\": \"Light\",\n      \"dark\": \"Dark\",\n      \"system\": \"System\",\n      \"openMenu\": \"Open Menu\",\n      \"menu\": \"Menu\"\n    }\n  }\n}",
      "type": "registry:file",
      "target": "messages/components/header/en.json"
    },
    {
      "path": "registry/new-york/blocks/header/messages/ja.json",
      "content": "{\n  \"component\": {\n    \"header-search\": {\n      \"placeholder\": \"検索...\",\n      \"noresults\": \"結果が見つかりませんでした\"\n    },\n    \"header\": {\n      \"notifications\": \"通知\",\n      \"login\": \"ログイン\",\n      \"profile\": \"プロフィール\",\n      \"billing\": \"支払い\",\n      \"settings\": \"設定\",\n      \"language\": \"言語\",\n      \"theme\": \"テーマ\",\n      \"logout\": \"ログアウト\",\n      \"light\": \"ライト\",\n      \"dark\": \"ダーク\",\n      \"system\": \"システム\",\n      \"openMenu\": \"メニューを開く\",\n      \"menu\": \"メニュー\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "messages/components/header/ja.json"
    }
  ]
}