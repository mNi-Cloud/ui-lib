{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resource-delete",
  "type": "registry:hook",
  "title": "Resource Delete",
  "description": "A resource delete hook.",
  "dependencies": [
    "next-intl",
    "swr"
  ],
  "registryDependencies": [
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/actions.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/resource-delete/resource-delete.tsx",
      "content": "import { useState } from 'react';\nimport { KeyedMutator } from 'swr';\nimport { useTranslations } from 'next-intl';\nimport { deleteResources } from '@/registry/new-york/blocks/actions/resource-actions';\n\ninterface Resource {\n  [key: string]: any;\n}\n\nexport interface ResourceIdentifierConfig {\n  idField?: string;\n  nameField?: string;\n  alternativeFields?: string[];\n}\n\ninterface UseResourceDeletionProps<T extends Resource> {\n  resourceType: string;\n  mutate: KeyedMutator<T[]>;\n  deleteUrl: (resourceId: string) => string;\n  getResourceIdentifier?: (resource: T) => string;\n  identifierConfig?: ResourceIdentifierConfig;\n}\n\nconst defaultConfig: ResourceIdentifierConfig = {\n  idField: 'id',\n  nameField: 'name',\n  alternativeFields: ['title', 'label', 'text', 'description']\n};\n\nexport function getDefaultResourceIdentifier<T extends Resource>(\n  resource: T, \n  config: ResourceIdentifierConfig = defaultConfig\n): string {\n  const { idField, nameField } = { ...defaultConfig, ...config };\n  \n  if (idField && resource[idField] !== undefined) {\n    return String(resource[idField]);\n  }\n  \n  if (nameField && resource[nameField] !== undefined) {\n    return String(resource[nameField]);\n  }\n  \n  return JSON.stringify(resource);\n}\n\nexport function getResourceDisplayName<T extends Resource>(\n  resource: T, \n  config: ResourceIdentifierConfig = defaultConfig\n): string {\n  const { idField, nameField, alternativeFields } = { ...defaultConfig, ...config };\n  \n  if (nameField && resource[nameField] !== undefined) {\n    return String(resource[nameField]);\n  }\n  \n  if (idField && resource[idField] !== undefined) {\n    return `ID: ${resource[idField]}`;\n  }\n  \n  if (alternativeFields) {\n    for (const field of alternativeFields) {\n      if (resource[field]) {\n        return String(resource[field]);\n      }\n    }\n  }\n  \n  return '不明なリソース';\n}\n\nexport function useResourceDeletion<T extends Resource>({ \n  resourceType, \n  mutate, \n  deleteUrl,\n  getResourceIdentifier,\n  identifierConfig = defaultConfig\n}: UseResourceDeletionProps<T>) {\n  const [selectedResources, setSelectedResources] = useState<T[]>([]);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const t = useTranslations('hooks.resource-delete');\n  \n  const getResourceId = getResourceIdentifier || \n    ((resource: T) => getDefaultResourceIdentifier(resource, identifierConfig));\n  \n  const getDisplayName = (resource: T) => getResourceDisplayName(resource, identifierConfig);\n  \n  const openDeleteDialog = (resources: T[]) => {\n    setSelectedResources(resources);\n    setIsDeleteDialogOpen(true);\n    setError(null);\n    setSuccessMessage(null);\n  };\n\n  const handleDelete = async () => {\n    setError(null);\n    setSuccessMessage(null);\n    try {\n      // 削除URL配列を生成\n      const deleteUrls = selectedResources.map(resource => deleteUrl(getResourceId(resource)));\n      // サーバーアクションを使用して複数リソースを削除\n      await deleteResources(deleteUrls);\n      \n      await mutate();\n      setSelectedResources([]);\n      setIsDeleteDialogOpen(false);\n      setSuccessMessage(t('successmessage', { resourceType }));\n    } catch (error) {\n      setError(t('errormessage', { resourceType }));\n    }\n  };\n\n  const closeDeleteDialog = () => {\n    setIsDeleteDialogOpen(false);\n    setError(null);\n    setSuccessMessage(null);\n  };\n\n  return {\n    selectedResources,\n    isDeleteDialogOpen,\n    error,\n    successMessage,\n    openDeleteDialog,\n    handleDelete,\n    closeDeleteDialog,\n    getResourceDisplayName: getDisplayName\n  };\n}",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/resource-delete/messages/en.json",
      "content": "{\n  \"hooks\": {\n    \"resource-delete\": {\n      \"failedmessage\": \"{resourceType} deletion failed\",\n      \"successmessage\": \"{resourceType} deleted successfully\",\n      \"errormessage\": \"An error occurred while deleting {resourceType}. Please try again.\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "messages/hooks/resource-delete/en.json"
    },
    {
      "path": "registry/new-york/blocks/resource-delete/messages/ja.json",
      "content": "{\n  \"hooks\": {\n    \"resource-delete\": {\n      \"failedmessage\": \"{resourceType}の削除に失敗しました\",\n      \"successmessage\": \"{resourceType}を削除しました\",\n      \"errormessage\": \"{resourceType}の削除中にエラーが発生しました。もう一度お試しください。\"\n    }\n  }\n}\n",
      "type": "registry:file",
      "target": "messages/hooks/resource-delete/ja.json"
    }
  ]
}