{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "link",
  "type": "registry:component",
  "title": "Link",
  "description": "A link component.",
  "files": [
    {
      "path": "registry/new-york/blocks/link/link.tsx",
      "content": "'use client';\nimport NextLink, { LinkProps as NextLinkProps } from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { AnchorHTMLAttributes, forwardRef, useMemo } from 'react';\nimport Script from 'next/script';\n\nexport type LinkProps = Omit<NextLinkProps, 'href'> &\n  Omit<AnchorHTMLAttributes<HTMLAnchorElement>, keyof NextLinkProps> & {\n    href: string;\n  };\n\nconst Link = forwardRef<HTMLAnchorElement, LinkProps>(\n  ({ href, children, className, ...props }, ref) => {\n    const pathname = usePathname();\n\n    const { isExternalLink, isSameZoneLink, isOtherZoneLink } = useMemo(() => {\n      const isExternal = /^(https?:\\/\\/|mailto:|tel:)/.test(href);\n\n      const getAppName = (path: string) => {\n        const segments = path.split('/');\n        return segments[1] || '';\n      };\n\n      const currentAppName = getAppName(pathname);\n      const linkAppName = getAppName(href);\n\n      return {\n        isExternalLink: isExternal,\n        isSameZoneLink: !isExternal && currentAppName === linkAppName,\n        isOtherZoneLink:\n          !isExternal && currentAppName !== linkAppName && href.startsWith('/'),\n      };\n    }, [href, pathname]);\n\n    const speculationRules = useMemo(() => {\n      if (isOtherZoneLink) {\n        const rules = {\n          prefetch: [\n            {\n              source: 'list',\n              eagerness: 'moderate',\n              urls: [href],\n            },\n          ],\n          prerender: [\n            {\n              source: 'list',\n              eagerness: 'conservative',\n              urls: [href],\n            },\n          ],\n        };\n        return JSON.stringify(rules);\n      }\n      return null;\n    }, [href, isOtherZoneLink]);\n\n    if (isExternalLink) {\n      return (\n        <a\n          ref={ref}\n          href={href}\n          className={className}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          {...props}\n        >\n          {children}\n        </a>\n      );\n    }\n\n    if (isSameZoneLink) {\n      return (\n        <NextLink ref={ref} href={href} className={className} {...props}>\n          {children}\n        </NextLink>\n      );\n    }\n\n    return (\n      <>\n        <a ref={ref} href={href} className={className} {...props}>\n          {children}\n        </a>\n        {speculationRules && (\n          <Script\n            id={`prefetch-${href}`}\n            type=\"speculationrules\"\n            dangerouslySetInnerHTML={{ __html: speculationRules }}\n          />\n        )}\n      </>\n    );\n  }\n);\n\nLink.displayName = 'Link';\n\nexport default Link;\n",
      "type": "registry:component"
    }
  ]
}