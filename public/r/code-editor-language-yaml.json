{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-editor-language-yaml",
  "type": "registry:file",
  "title": "YAML Language Plugin for Code Editor",
  "description": "YAML language support for Monaco Code Editor.",
  "dependencies": [
    "monaco-editor",
    "yaml"
  ],
  "registryDependencies": [
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/code-editor.json",
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/code-editor-language-plugin.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/language-plugin/yaml.ts",
      "content": "import type { LanguagePlugin } from './index';\nimport * as yaml from 'yaml';\nimport type { Monaco } from '@monaco-editor/react';\nimport type { editor } from 'monaco-editor';\n\ninterface YamlError extends Error {\n  linePos?: {\n    start?: { line: number; col: number };\n    end?: { line: number; col: number };\n  };\n  message: string;\n}\n\nconst YamlPlugin: LanguagePlugin = {\n  language: 'yaml',\n  \n  load: async () => {\n    return Promise.resolve();\n  },\n  \n  configure: (monaco: Monaco) => {\n    try {\n      const yamlDiagnosticsOwner = 'yaml-validator';\n      \n      const validateYaml = (code: string, model: editor.ITextModel) => {\n        monaco.editor.setModelMarkers(model, yamlDiagnosticsOwner, []);\n        \n        if (!code.trim()) return;\n        \n        try {\n          yaml.parse(code);\n        } catch (error) {\n          const yamlError = error as YamlError;\n          if (yamlError.linePos?.start) {\n            const { line, col } = yamlError.linePos.start;\n            const startLineNumber = line;\n            const startColumn = col;\n            const endLineNumber = yamlError.linePos.end?.line || startLineNumber;\n            const endColumn = yamlError.linePos.end?.col || (startColumn + 1);\n            \n            monaco.editor.setModelMarkers(model, yamlDiagnosticsOwner, [{\n              severity: monaco.MarkerSeverity.Error,\n              message: yamlError.message || 'YAML syntax error',\n              startLineNumber,\n              startColumn,\n              endLineNumber,\n              endColumn\n            }]);\n          } else {\n            monaco.editor.setModelMarkers(model, yamlDiagnosticsOwner, [{\n              severity: monaco.MarkerSeverity.Error,\n              message: yamlError.message || 'YAML syntax error',\n              startLineNumber: 1,\n              startColumn: 1,\n              endLineNumber: 1,\n              endColumn: 2\n            }]);\n          }\n        }\n      };\n      \n      const setupModelChangeListener = (model: editor.ITextModel) => {\n        if (model.getLanguageId() === 'yaml') {\n          validateYaml(model.getValue(), model);\n          \n          model.onDidChangeContent(() => {\n            validateYaml(model.getValue(), model);\n          });\n        }\n      };\n      \n      monaco.editor.getModels().forEach(model => {\n        if (model.getLanguageId() === 'yaml') {\n          setupModelChangeListener(model);\n        }\n      });\n      \n      monaco.editor.onDidCreateModel(model => {\n        if (model.getLanguageId() === 'yaml') {\n          setupModelChangeListener(model);\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error configuring YAML:', error);\n    }\n  }\n};\n\nexport default YamlPlugin;",
      "type": "registry:file",
      "target": "lib/language-plugin/yaml.ts"
    }
  ]
}