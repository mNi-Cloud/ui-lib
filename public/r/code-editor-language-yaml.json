{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-editor-language-yaml",
  "type": "registry:file",
  "title": "YAML Language Plugin for Code Editor",
  "description": "YAML language support for Monaco Code Editor.",
  "dependencies": [
    "monaco-editor",
    "monaco-yaml"
  ],
  "registryDependencies": [
    "https://raw.github.com/mNi-Cloud/ui-lib/main/public/r/code-editor.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/code-editor/language-plugin/yaml.ts",
      "content": "import type { LanguagePlugin } from './index';\n\nconst YamlPlugin: LanguagePlugin = {\n  language: 'yaml',\n  load: async () => {\n    try {\n      // 注: モジュールのパスは環境に応じて変更が必要かもしれません\n      if (typeof window !== 'undefined' && window.monaco) {\n        // すでにMonacoがロードされている場合でも初期化を行う\n        try {\n          const monacoYaml = await import('monaco-yaml');\n          // monaco-yamlライブラリを初期化\n          monacoYaml.configureMonacoYaml(window.monaco, {\n            validate: true,\n            enableSchemaRequest: true,\n            hover: true,\n            completion: true,\n            format: true,\n            // YAMLのバリデーションを強化\n            schemas: [],\n          });\n        } catch (err) {\n          console.warn('monaco-yamlパッケージが見つかりません。基本的なYAML構文ハイライトのみが利用可能です。', err);\n        }\n        return;\n      }\n      \n      // monaco-yamlパッケージをロード（存在する場合）\n      try {\n        await import('monaco-yaml');\n        // monaco-yamlが正常にロードされた場合は、モナコエディタがロードされたときに\n        // configure関数で初期化される\n      } catch (err) {\n        console.warn('monaco-yamlパッケージが見つかりません。基本的なYAML構文ハイライトのみが利用可能です。', err);\n      }\n    } catch (error) {\n      console.error('YAML言語サポートのロード中にエラーが発生しました:', error);\n    }\n  },\n  configure: (monaco) => {\n    try {\n      // monaco-yamlを初期化\n      import('monaco-yaml').then((monacoYaml) => {\n        // YAMLサポートをモナコエディタに追加\n        monacoYaml.configureMonacoYaml(monaco, {\n          validate: true,\n          enableSchemaRequest: true,\n          hover: true,\n          completion: true,\n          format: true,\n          // YAMLのバリデーションを強化\n          schemas: [],\n        });\n      }).catch(err => {\n        console.warn('YAMLサポートの初期化中にエラーが発生しました:', err);\n      });\n    } catch (error) {\n      console.error('YAML設定中にエラーが発生しました:', error);\n    }\n  }\n};\n\nexport default YamlPlugin; ",
      "type": "registry:file",
      "target": "lib/language-plugin/yaml.ts"
    }
  ]
}