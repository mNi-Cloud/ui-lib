{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-editor-language-plugin",
  "type": "registry:file",
  "title": "Language Plugin for Code Editor",
  "description": "Language plugin for Monaco Code Editor.",
  "dependencies": [
    "monaco-editor"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/language-plugin/index.ts",
      "content": "import type { SupportedLanguage } from '@/registry/new-york/blocks/code-editor/code-editor';\n\nexport interface LanguagePlugin {\n  language: SupportedLanguage;\n  load: () => Promise<void>;\n  configure?: (monaco: any) => void;\n}\n\nconst plugins = new Map<SupportedLanguage, LanguagePlugin>();\n\nexport function registerLanguagePlugin(plugin: LanguagePlugin): void {\n  plugins.set(plugin.language, plugin);\n}\n\nexport function getLanguagePlugin(language: SupportedLanguage): LanguagePlugin | undefined {\n  return plugins.get(language);\n}\n\nexport function getAllLanguagePlugins(): LanguagePlugin[] {\n  return Array.from(plugins.values());\n}\n\nexport function getAvailableLanguages(): SupportedLanguage[] {\n  return Array.from(plugins.keys());\n}\n\nexport async function importLanguagePlugin(language: SupportedLanguage): Promise<LanguagePlugin | undefined> {\n  try {\n    if (plugins.has(language)) {\n      return plugins.get(language);\n    }\n\n    const module = await import(`./${language}`).catch(() => null);\n    \n    if (module && module.default) {\n      registerLanguagePlugin(module.default);\n      return module.default;\n    }\n    \n    return undefined;\n  } catch (error) {\n    console.error(`Error importing language plugin '${language}':`, error);\n    return undefined;\n  }\n}\n",
      "type": "registry:file",
      "target": "lib/language-plugin/index.ts"
    }
  ]
}